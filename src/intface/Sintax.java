
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 30 15:45:33 MST 2021
//----------------------------------------------------

package intface;

import classes.Objetos;
import classes.Errores;
import classes.LineasCodigo;
import java_cup.runtime.Symbol;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 30 15:45:33 MST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\017\006\000\002\033\002\000\002\017\010" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\004\000\002\003" +
    "\004\000\002\004\005\000\002\004\007\000\002\004\007" +
    "\000\002\004\005\000\002\004\007\000\002\034\002\000" +
    "\002\004\007\000\002\035\002\000\002\004\011\000\002" +
    "\036\002\000\002\004\011\000\002\037\002\000\002\004" +
    "\007\000\002\040\002\000\002\004\011\000\002\004\003" +
    "\000\002\021\006\000\002\041\002\000\002\021\010\000" +
    "\002\021\006\000\002\042\002\000\002\021\010\000\002" +
    "\021\005\000\002\043\002\000\002\021\007\000\002\021" +
    "\006\000\002\044\002\000\002\021\010\000\002\021\006" +
    "\000\002\045\002\000\002\021\010\000\002\021\003\000" +
    "\002\046\002\000\002\047\002\000\002\006\013\000\002" +
    "\027\003\000\002\050\002\000\002\027\005\000\002\051" +
    "\002\000\002\027\005\000\002\013\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\007\006\000\002" +
    "\031\003\000\002\052\002\000\002\031\005\000\002\053" +
    "\002\000\002\054\002\000\002\011\013\000\002\030\003" +
    "\000\002\055\002\000\002\030\005\000\002\056\002\000" +
    "\002\057\002\000\002\012\013\000\002\032\003\000\002" +
    "\060\002\000\002\032\005\000\002\061\002\000\002\014" +
    "\013\000\002\062\002\000\002\014\012\000\002\005\005" +
    "\000\002\005\005\000\002\005\004\000\002\063\002\000" +
    "\002\015\007\000\002\064\002\000\002\015\010\000\002" +
    "\065\002\000\002\016\010\000\002\066\002\000\002\016" +
    "\010\000\002\067\002\000\002\016\010\000\002\070\002" +
    "\000\002\016\010\000\002\071\002\000\002\016\010\000" +
    "\002\072\002\000\002\016\010\000\002\073\002\000\002" +
    "\016\011\000\002\074\002\000\002\016\011\000\002\075" +
    "\002\000\002\016\011\000\002\076\002\000\002\016\011" +
    "\000\002\077\002\000\002\016\010\000\002\100\002\000" +
    "\002\016\010\000\002\101\002\000\002\016\011\000\002" +
    "\102\002\000\002\016\011\000\002\103\002\000\002\026" +
    "\006\000\002\026\004\000\002\020\011\000\002\020\012" +
    "\000\002\010\010\000\002\104\002\000\002\010\012\000" +
    "\002\010\006\000\002\010\006\000\002\010\006\000\002" +
    "\010\006\000\002\010\006\000\002\105\002\000\002\010" +
    "\010\000\002\106\002\000\002\010\010\000\002\107\002" +
    "\000\002\010\010\000\002\110\002\000\002\010\010\000" +
    "\002\111\002\000\002\010\010\000\002\010\006\000\002" +
    "\112\002\000\002\010\010\000\002\010\007\000\002\113" +
    "\002\000\002\010\011\000\002\114\002\000\002\010\011" +
    "\000\002\010\007\000\002\010\007\000\002\115\002\000" +
    "\002\010\011\000\002\010\003\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\023" +
    "\004\000\002\023\005\000\002\023\004\000\002\116\002" +
    "\000\002\023\006\000\002\023\004\000\002\023\005\000" +
    "\002\023\006\000\002\023\007\000\002\023\006\000\002" +
    "\023\007\000\002\023\006\000\002\023\007\000\002\023" +
    "\007\000\002\023\010\000\002\023\006\000\002\023\007" +
    "\000\002\023\006\000\002\023\007\000\002\024\005\000" +
    "\002\117\002\000\002\024\007\000\002\024\005\000\002" +
    "\120\002\000\002\024\007\000\002\024\005\000\002\121" +
    "\002\000\002\024\007\000\002\025\005\000\002\122\002" +
    "\000\002\025\007\000\002\025\005\000\002\123\002\000" +
    "\002\025\007\000\002\025\005\000\002\124\002\000\002" +
    "\025\007\000\002\025\005\000\002\125\002\000\002\025" +
    "\007\000\002\025\005\000\002\126\002\000\002\025\007" +
    "\000\002\025\005\000\002\127\002\000\002\025\007\000" +
    "\002\025\005\000\002\130\002\000\002\025\007\000\002" +
    "\025\005\000\002\131\002\000\002\025\007\000\002\025" +
    "\005\000\002\132\002\000\002\025\007\000\002\025\005" +
    "\000\002\133\002\000\002\025\007\000\002\025\005\000" +
    "\002\134\002\000\002\025\007\000\002\025\005\000\002" +
    "\135\002\000\002\025\007\000\002\025\005\000\002\136" +
    "\002\000\002\025\007\000\002\025\005\000\002\137\002" +
    "\000\002\025\007\000\002\025\005\000\002\140\002\000" +
    "\002\025\007\000\002\025\006\000\002\141\002\000\002" +
    "\025\010\000\002\025\006\000\002\142\002\000\002\025" +
    "\010\000\002\025\006\000\002\143\002\000\002\025\010" +
    "\000\002\025\006\000\002\144\002\000\002\025\010\000" +
    "\002\025\006\000\002\145\002\000\002\025\010\000\002" +
    "\025\006\000\002\146\002\000\002\025\010\000\002\025" +
    "\006\000\002\147\002\000\002\025\010\000\002\025\006" +
    "\000\002\150\002\000\002\025\010\000\002\025\006\000" +
    "\002\151\002\000\002\025\010\000\002\025\006\000\002" +
    "\152\002\000\002\025\010\000\002\025\006\000\002\153" +
    "\002\000\002\025\010\000\002\025\006\000\002\154\002" +
    "\000\002\025\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a8\000\006\025\006\030\007\001\002\000\004\002" +
    "\000\001\002\000\004\002\uffff\001\002\000\006\023\014" +
    "\030\015\001\002\000\004\023\012\001\002\000\004\002" +
    "\011\001\002\000\004\002\001\001\002\000\004\024\013" +
    "\001\002\000\004\002\uff67\001\002\000\004\024\u01aa\001" +
    "\002\000\006\023\017\024\016\001\002\000\004\002\uff65" +
    "\001\002\000\052\002\uff64\003\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\011\ufffd\012\ufffd\024\020\030\ufffd\032\ufffd\033\ufffd" +
    "\034\ufffd\035\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043" +
    "\ufffd\050\ufffd\051\ufffd\001\002\000\004\002\ufffe\001\002" +
    "\000\046\003\054\004\043\005\046\006\022\011\033\012" +
    "\026\030\035\032\051\033\044\034\041\035\040\037\025" +
    "\040\036\041\053\042\037\043\045\050\023\051\055\001" +
    "\002\000\004\021\u0196\001\002\000\006\021\u0183\031\u0182" +
    "\001\002\000\004\024\ufff5\001\002\000\006\021\u016f\031" +
    "\u016e\001\002\000\004\021\u014c\001\002\000\004\024\ufff4" +
    "\001\002\000\004\024\ufffb\001\002\000\004\024\uff68\001" +
    "\002\000\004\024\u014b\001\002\000\004\021\u0133\001\002" +
    "\000\004\024\ufff7\001\002\000\016\013\u010d\016\u0109\017" +
    "\u010c\026\u010b\027\u010a\031\u0108\001\002\000\004\021\u0103" +
    "\001\002\000\006\021\365\022\366\001\002\000\006\021" +
    "\347\022\350\001\002\000\006\021\331\022\332\001\002" +
    "\000\004\024\ufff8\001\002\000\010\013\270\027\266\030" +
    "\267\001\002\000\004\030\257\001\002\000\006\021\241" +
    "\022\242\001\002\000\004\030\230\001\002\000\004\024" +
    "\uffe2\001\002\000\004\024\uffd2\001\002\000\004\030\124" +
    "\001\002\000\004\024\ufffa\001\002\000\006\021\101\031" +
    "\100\001\002\000\006\024\076\027\077\001\002\000\006" +
    "\021\060\022\061\001\002\000\004\024\ufff9\001\002\000" +
    "\004\024\ufff6\001\002\000\006\022\066\027\065\001\002" +
    "\000\004\027\062\001\002\000\050\003\uff3a\004\uff3a\005" +
    "\uff3a\006\uff3a\011\uff3a\012\uff3a\024\uff3b\030\uff3a\032\uff3a" +
    "\033\uff3a\034\uff3a\035\uff3a\037\uff3a\040\uff3a\041\uff3a\042" +
    "\uff3a\043\uff3a\050\uff3a\051\uff3a\001\002\000\046\003\054" +
    "\004\043\005\046\006\022\011\033\012\026\030\035\032" +
    "\051\033\044\034\041\035\040\037\025\040\036\041\053" +
    "\042\037\043\045\050\023\051\055\001\002\000\004\024" +
    "\uff39\001\002\000\050\003\uff2b\004\uff2b\005\uff2b\006\uff2b" +
    "\011\uff2b\012\uff2b\024\uff2c\030\uff2b\032\uff2b\033\uff2b\034" +
    "\uff2b\035\uff2b\037\uff2b\040\uff2b\041\uff2b\042\uff2b\043\uff2b" +
    "\050\uff2b\051\uff2b\001\002\000\052\003\uff1c\004\uff1c\005" +
    "\uff1c\006\uff1c\011\uff1c\012\uff1c\024\uff1d\027\070\030\uff1c" +
    "\032\uff1c\033\uff1c\034\uff1c\035\uff1c\037\uff1c\040\uff1c\041" +
    "\uff1c\042\uff1c\043\uff1c\050\uff1c\051\uff1c\001\002\000\046" +
    "\003\054\004\043\005\046\006\022\011\033\012\026\030" +
    "\035\032\051\033\044\034\041\035\040\037\025\040\036" +
    "\041\053\042\037\043\045\050\023\051\055\001\002\000" +
    "\050\003\uff73\004\uff73\005\uff73\006\uff73\011\uff73\012\uff73" +
    "\024\uff74\030\uff73\032\uff73\033\uff73\034\uff73\035\uff73\037" +
    "\uff73\040\uff73\041\uff73\042\uff73\043\uff73\050\uff73\051\uff73" +
    "\001\002\000\046\003\054\004\043\005\046\006\022\011" +
    "\033\012\026\030\035\032\051\033\044\034\041\035\040" +
    "\037\025\040\036\041\053\042\037\043\045\050\023\051" +
    "\055\001\002\000\004\024\uff72\001\002\000\004\024\uff1b" +
    "\001\002\000\046\003\054\004\043\005\046\006\022\011" +
    "\033\012\026\030\035\032\051\033\044\034\041\035\040" +
    "\037\025\040\036\041\053\042\037\043\045\050\023\051" +
    "\055\001\002\000\004\024\uff2a\001\002\000\004\024\ufff3" +
    "\001\002\000\004\024\ufff2\001\002\000\004\022\120\001" +
    "\002\000\006\022\103\031\102\001\002\000\006\022\110" +
    "\027\107\001\002\000\004\027\104\001\002\000\050\003" +
    "\uff0d\004\uff0d\005\uff0d\006\uff0d\011\uff0d\012\uff0d\024\uff0e" +
    "\030\uff0d\032\uff0d\033\uff0d\034\uff0d\035\uff0d\037\uff0d\040" +
    "\uff0d\041\uff0d\042\uff0d\043\uff0d\050\uff0d\051\uff0d\001\002" +
    "\000\046\003\054\004\043\005\046\006\022\011\033\012" +
    "\026\030\035\032\051\033\044\034\041\035\040\037\025" +
    "\040\036\041\053\042\037\043\045\050\023\051\055\001" +
    "\002\000\004\024\uff0c\001\002\000\050\003\uff04\004\uff04" +
    "\005\uff04\006\uff04\011\uff04\012\uff04\024\uff05\030\uff04\032" +
    "\uff04\033\uff04\034\uff04\035\uff04\037\uff04\040\uff04\041\uff04" +
    "\042\uff04\043\uff04\050\uff04\051\uff04\001\002\000\052\003" +
    "\ufefb\004\ufefb\005\ufefb\006\ufefb\011\ufefb\012\ufefb\024\ufefc" +
    "\027\112\030\ufefb\032\ufefb\033\ufefb\034\ufefb\035\ufefb\037" +
    "\ufefb\040\ufefb\041\ufefb\042\ufefb\043\ufefb\050\ufefb\051\ufefb" +
    "\001\002\000\046\003\054\004\043\005\046\006\022\011" +
    "\033\012\026\030\035\032\051\033\044\034\041\035\040" +
    "\037\025\040\036\041\053\042\037\043\045\050\023\051" +
    "\055\001\002\000\050\003\uff6e\004\uff6e\005\uff6e\006\uff6e" +
    "\011\uff6e\012\uff6e\024\uff6c\030\uff6e\032\uff6e\033\uff6e\034" +
    "\uff6e\035\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e" +
    "\050\uff6e\051\uff6e\001\002\000\046\003\054\004\043\005" +
    "\046\006\022\011\033\012\026\030\035\032\051\033\044" +
    "\034\041\035\040\037\025\040\036\041\053\042\037\043" +
    "\045\050\023\051\055\001\002\000\004\024\uff6d\001\002" +
    "\000\004\024\ufefa\001\002\000\046\003\054\004\043\005" +
    "\046\006\022\011\033\012\026\030\035\032\051\033\044" +
    "\034\041\035\040\037\025\040\036\041\053\042\037\043" +
    "\045\050\023\051\055\001\002\000\004\024\uff03\001\002" +
    "\000\004\027\121\001\002\000\050\003\uff16\004\uff16\005" +
    "\uff16\006\uff16\011\uff16\012\uff16\024\uff17\030\uff16\032\uff16" +
    "\033\uff16\034\uff16\035\uff16\037\uff16\040\uff16\041\uff16\042" +
    "\uff16\043\uff16\050\uff16\051\uff16\001\002\000\046\003\054" +
    "\004\043\005\046\006\022\011\033\012\026\030\035\032" +
    "\051\033\044\034\041\035\040\037\025\040\036\041\053" +
    "\042\037\043\045\050\023\051\055\001\002\000\004\024" +
    "\uff15\001\002\000\004\013\125\001\002\000\004\023\126" +
    "\001\002\000\020\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\050\uffa9\051\uffa9\001\002\000\020\037\137\040\131" +
    "\041\134\042\135\043\132\050\130\051\136\001\002\000" +
    "\004\021\220\001\002\000\004\021\211\001\002\000\004" +
    "\021\202\001\002\000\004\024\uffa8\001\002\000\004\021" +
    "\172\001\002\000\004\021\163\001\002\000\004\021\154" +
    "\001\002\000\004\021\140\001\002\000\004\031\141\001" +
    "\002\000\004\022\142\001\002\000\004\027\143\001\002" +
    "\000\022\024\uff9b\037\uff99\040\uff99\041\uff99\042\uff99\043" +
    "\uff99\050\uff99\051\uff99\001\002\000\020\037\137\040\131" +
    "\041\134\042\135\043\132\050\130\051\136\001\002\000" +
    "\004\024\146\001\002\000\004\027\150\001\002\000\004" +
    "\024\uff9a\001\002\000\050\003\uff8b\004\uff8b\005\uff8b\006" +
    "\uff8b\011\uff8b\012\uff8b\024\uff89\030\uff8b\032\uff8b\033\uff8b" +
    "\034\uff8b\035\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043" +
    "\uff8b\050\uff8b\051\uff8b\001\002\000\046\003\054\004\043" +
    "\005\046\006\022\011\033\012\026\030\035\032\051\033" +
    "\044\034\041\035\040\037\025\040\036\041\053\042\037" +
    "\043\045\050\023\051\055\001\002\000\004\024\uff8a\001" +
    "\002\000\004\024\uff98\001\002\000\004\022\155\001\002" +
    "\000\004\027\156\001\002\000\022\024\uff91\037\uff93\040" +
    "\uff93\041\uff93\042\uff93\043\uff93\050\uff93\051\uff93\001\002" +
    "\000\004\024\146\001\002\000\020\037\137\040\131\041" +
    "\134\042\135\043\132\050\130\051\136\001\002\000\004" +
    "\024\uff92\001\002\000\004\024\uff90\001\002\000\004\022" +
    "\164\001\002\000\004\027\165\001\002\000\022\024\uffa7" +
    "\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\050\uffa1\051" +
    "\uffa1\001\002\000\020\037\137\040\131\041\134\042\135" +
    "\043\132\050\130\051\136\001\002\000\004\024\146\001" +
    "\002\000\004\024\uffa6\001\002\000\004\024\uffa0\001\002" +
    "\000\004\031\173\001\002\000\004\022\174\001\002\000" +
    "\004\027\175\001\002\000\022\024\uff97\037\uff95\040\uff95" +
    "\041\uff95\042\uff95\043\uff95\050\uff95\051\uff95\001\002\000" +
    "\004\024\146\001\002\000\020\037\137\040\131\041\134" +
    "\042\135\043\132\050\130\051\136\001\002\000\004\024" +
    "\uff94\001\002\000\004\024\uff96\001\002\000\004\022\203" +
    "\001\002\000\004\027\204\001\002\000\022\024\uffa5\037" +
    "\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\050\uff9f\051\uff9f" +
    "\001\002\000\020\037\137\040\131\041\134\042\135\043" +
    "\132\050\130\051\136\001\002\000\004\024\146\001\002" +
    "\000\004\024\uffa4\001\002\000\004\024\uff9e\001\002\000" +
    "\004\022\212\001\002\000\004\027\213\001\002\000\022" +
    "\024\uffa3\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\050" +
    "\uff9d\051\uff9d\001\002\000\020\037\137\040\131\041\134" +
    "\042\135\043\132\050\130\051\136\001\002\000\004\024" +
    "\146\001\002\000\004\024\uffa2\001\002\000\004\024\uff9c" +
    "\001\002\000\004\031\221\001\002\000\004\022\222\001" +
    "\002\000\004\027\223\001\002\000\022\024\uff8d\037\uff8f" +
    "\040\uff8f\041\uff8f\042\uff8f\043\uff8f\050\uff8f\051\uff8f\001" +
    "\002\000\004\024\146\001\002\000\020\037\137\040\131" +
    "\041\134\042\135\043\132\050\130\051\136\001\002\000" +
    "\004\024\uff8e\001\002\000\004\024\uff8c\001\002\000\006" +
    "\013\232\027\231\001\002\000\050\003\uffe6\004\uffe6\005" +
    "\uffe6\006\uffe6\011\uffe6\012\uffe6\024\uffee\030\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\037\uffe6\040\uffe6\041\uffe6\042" +
    "\uffe6\043\uffe6\050\uffe6\051\uffe6\001\002\000\004\044\233" +
    "\001\002\000\004\027\234\001\002\000\050\003\uffe4\004" +
    "\uffe4\005\uffe4\006\uffe4\011\uffe4\012\uffe4\024\uffed\030\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\043\uffe4\050\uffe4\051\uffe4\001\002\000\046" +
    "\003\054\004\043\005\046\006\022\011\033\012\026\030" +
    "\035\032\051\033\044\034\041\035\040\037\025\040\036" +
    "\041\053\042\037\043\045\050\023\051\055\001\002\000" +
    "\004\024\uffe3\001\002\000\046\003\054\004\043\005\046" +
    "\006\022\011\033\012\026\030\035\032\051\033\044\034" +
    "\041\035\040\037\025\040\036\041\053\042\037\043\045" +
    "\050\023\051\055\001\002\000\004\024\uffe5\001\002\000" +
    "\006\022\247\027\246\001\002\000\004\027\243\001\002" +
    "\000\050\003\uff3d\004\uff3d\005\uff3d\006\uff3d\011\uff3d\012" +
    "\uff3d\024\uff3e\030\uff3d\032\uff3d\033\uff3d\034\uff3d\035\uff3d" +
    "\037\uff3d\040\uff3d\041\uff3d\042\uff3d\043\uff3d\050\uff3d\051" +
    "\uff3d\001\002\000\046\003\054\004\043\005\046\006\022" +
    "\011\033\012\026\030\035\032\051\033\044\034\041\035" +
    "\040\037\025\040\036\041\053\042\037\043\045\050\023" +
    "\051\055\001\002\000\004\024\uff3c\001\002\000\050\003" +
    "\uff2e\004\uff2e\005\uff2e\006\uff2e\011\uff2e\012\uff2e\024\uff2f" +
    "\030\uff2e\032\uff2e\033\uff2e\034\uff2e\035\uff2e\037\uff2e\040" +
    "\uff2e\041\uff2e\042\uff2e\043\uff2e\050\uff2e\051\uff2e\001\002" +
    "\000\052\003\uff1f\004\uff1f\005\uff1f\006\uff1f\011\uff1f\012" +
    "\uff1f\024\uff20\027\251\030\uff1f\032\uff1f\033\uff1f\034\uff1f" +
    "\035\uff1f\037\uff1f\040\uff1f\041\uff1f\042\uff1f\043\uff1f\050" +
    "\uff1f\051\uff1f\001\002\000\046\003\054\004\043\005\046" +
    "\006\022\011\033\012\026\030\035\032\051\033\044\034" +
    "\041\035\040\037\025\040\036\041\053\042\037\043\045" +
    "\050\023\051\055\001\002\000\050\003\uff78\004\uff78\005" +
    "\uff78\006\uff78\011\uff78\012\uff78\024\uff80\030\uff78\032\uff78" +
    "\033\uff78\034\uff78\035\uff78\037\uff78\040\uff78\041\uff78\042" +
    "\uff78\043\uff78\050\uff78\051\uff78\001\002\000\046\003\054" +
    "\004\043\005\046\006\022\011\033\012\026\030\035\032" +
    "\051\033\044\034\041\035\040\037\025\040\036\041\053" +
    "\042\037\043\045\050\023\051\055\001\002\000\004\024" +
    "\uff77\001\002\000\004\024\uff1e\001\002\000\046\003\054" +
    "\004\043\005\046\006\022\011\033\012\026\030\035\032" +
    "\051\033\044\034\041\035\040\037\025\040\036\041\053" +
    "\042\037\043\045\050\023\051\055\001\002\000\004\024" +
    "\uff2d\001\002\000\004\021\260\001\002\000\004\022\261" +
    "\001\002\000\004\023\262\001\002\000\046\003\054\004" +
    "\043\005\046\006\022\011\033\012\026\030\035\032\051" +
    "\033\044\034\041\035\040\037\025\040\036\041\053\042" +
    "\037\043\045\050\023\051\055\001\002\000\004\024\264" +
    "\001\002\000\050\003\054\004\043\005\046\006\022\011" +
    "\033\012\026\024\uff88\030\035\032\051\033\044\034\041" +
    "\035\040\037\025\040\036\041\053\042\037\043\045\050" +
    "\023\051\055\001\002\000\004\024\uff87\001\002\000\050" +
    "\003\054\004\043\005\046\006\022\011\033\012\026\024" +
    "\uff63\030\035\032\051\033\044\034\041\035\040\037\025" +
    "\040\036\041\053\042\037\043\045\050\023\051\055\001" +
    "\002\000\060\003\uff60\004\uff60\005\uff60\006\uff60\011\uff60" +
    "\012\uff60\013\303\020\301\024\uff61\027\300\030\uff60\031" +
    "\277\032\uff60\033\uff60\034\uff60\035\uff60\037\uff60\040\uff60" +
    "\041\uff60\042\uff60\043\uff60\050\uff60\051\uff60\001\002\000" +
    "\006\020\272\031\271\001\002\000\004\027\275\001\002" +
    "\000\004\027\273\001\002\000\050\003\054\004\043\005" +
    "\046\006\022\011\033\012\026\024\uff54\030\035\032\051" +
    "\033\044\034\041\035\040\037\025\040\036\041\053\042" +
    "\037\043\045\050\023\051\055\001\002\000\004\024\uff53" +
    "\001\002\000\050\003\054\004\043\005\046\006\022\011" +
    "\033\012\026\024\uff5c\030\035\032\051\033\044\034\041" +
    "\035\040\037\025\040\036\041\053\042\037\043\045\050" +
    "\023\051\055\001\002\000\004\024\uff5b\001\002\000\004" +
    "\027\326\001\002\000\050\003\uffec\004\uffec\005\uffec\006" +
    "\uffec\011\uffec\012\uffec\024\ufff1\030\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043" +
    "\uffec\050\uffec\051\uffec\001\002\000\004\027\322\001\002" +
    "\000\046\003\054\004\043\005\046\006\022\011\033\012" +
    "\026\030\035\032\051\033\044\034\041\035\040\037\025" +
    "\040\036\041\053\042\037\043\045\050\023\051\055\001" +
    "\002\000\012\020\306\027\305\031\304\044\307\001\002" +
    "\000\004\027\316\001\002\000\050\003\054\004\043\005" +
    "\046\006\022\011\033\012\026\024\uff58\030\035\032\051" +
    "\033\044\034\041\035\040\037\025\040\036\041\053\042" +
    "\037\043\045\050\023\051\055\001\002\000\004\027\312" +
    "\001\002\000\004\027\310\001\002\000\050\003\054\004" +
    "\043\005\046\006\022\011\033\012\026\024\uff56\030\035" +
    "\032\051\033\044\034\041\035\040\037\025\040\036\041" +
    "\053\042\037\043\045\050\023\051\055\001\002\000\004" +
    "\024\uff55\001\002\000\050\003\uffe8\004\uffe8\005\uffe8\006" +
    "\uffe8\011\uffe8\012\uffe8\024\uffef\030\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\050\uffe8\051\uffe8\001\002\000\046\003\054\004\043" +
    "\005\046\006\022\011\033\012\026\030\035\032\051\033" +
    "\044\034\041\035\040\037\025\040\036\041\053\042\037" +
    "\043\045\050\023\051\055\001\002\000\004\024\uffe7\001" +
    "\002\000\004\024\uff57\001\002\000\050\003\uffea\004\uffea" +
    "\005\uffea\006\uffea\011\uffea\012\uffea\024\ufff0\030\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\037\uffea\040\uffea\041\uffea" +
    "\042\uffea\043\uffea\050\uffea\051\uffea\001\002\000\046\003" +
    "\054\004\043\005\046\006\022\011\033\012\026\030\035" +
    "\032\051\033\044\034\041\035\040\037\025\040\036\041" +
    "\053\042\037\043\045\050\023\051\055\001\002\000\004" +
    "\024\uffe9\001\002\000\004\024\uff5f\001\002\000\050\003" +
    "\054\004\043\005\046\006\022\011\033\012\026\024\uff52" +
    "\030\035\032\051\033\044\034\041\035\040\037\025\040" +
    "\036\041\053\042\037\043\045\050\023\051\055\001\002" +
    "\000\004\024\uff51\001\002\000\046\003\054\004\043\005" +
    "\046\006\022\011\033\012\026\030\035\032\051\033\044" +
    "\034\041\035\040\037\025\040\036\041\053\042\037\043" +
    "\045\050\023\051\055\001\002\000\004\024\uffeb\001\002" +
    "\000\050\003\054\004\043\005\046\006\022\011\033\012" +
    "\026\024\uff5a\030\035\032\051\033\044\034\041\035\040" +
    "\037\025\040\036\041\053\042\037\043\045\050\023\051" +
    "\055\001\002\000\004\024\uff59\001\002\000\004\024\uff62" +
    "\001\002\000\006\022\337\027\336\001\002\000\004\027" +
    "\333\001\002\000\050\003\uff46\004\uff46\005\uff46\006\uff46" +
    "\011\uff46\012\uff46\024\uff47\030\uff46\032\uff46\033\uff46\034" +
    "\uff46\035\uff46\037\uff46\040\uff46\041\uff46\042\uff46\043\uff46" +
    "\050\uff46\051\uff46\001\002\000\046\003\054\004\043\005" +
    "\046\006\022\011\033\012\026\030\035\032\051\033\044" +
    "\034\041\035\040\037\025\040\036\041\053\042\037\043" +
    "\045\050\023\051\055\001\002\000\004\024\uff45\001\002" +
    "\000\050\003\uff37\004\uff37\005\uff37\006\uff37\011\uff37\012" +
    "\uff37\024\uff38\030\uff37\032\uff37\033\uff37\034\uff37\035\uff37" +
    "\037\uff37\040\uff37\041\uff37\042\uff37\043\uff37\050\uff37\051" +
    "\uff37\001\002\000\052\003\uff28\004\uff28\005\uff28\006\uff28" +
    "\011\uff28\012\uff28\024\uff29\027\340\030\uff28\032\uff28\033" +
    "\uff28\034\uff28\035\uff28\037\uff28\040\uff28\041\uff28\042\uff28" +
    "\043\uff28\050\uff28\051\uff28\001\002\000\050\003\uff7e\004" +
    "\uff7e\005\uff7e\006\uff7e\011\uff7e\012\uff7e\024\uff83\030\uff7e" +
    "\032\uff7e\033\uff7e\034\uff7e\035\uff7e\037\uff7e\040\uff7e\041" +
    "\uff7e\042\uff7e\043\uff7e\050\uff7e\051\uff7e\001\002\000\046" +
    "\003\054\004\043\005\046\006\022\011\033\012\026\030" +
    "\035\032\051\033\044\034\041\035\040\037\025\040\036" +
    "\041\053\042\037\043\045\050\023\051\055\001\002\000" +
    "\004\024\uff27\001\002\000\046\003\054\004\043\005\046" +
    "\006\022\011\033\012\026\030\035\032\051\033\044\034" +
    "\041\035\040\037\025\040\036\041\053\042\037\043\045" +
    "\050\023\051\055\001\002\000\004\024\uff7d\001\002\000" +
    "\046\003\054\004\043\005\046\006\022\011\033\012\026" +
    "\030\035\032\051\033\044\034\041\035\040\037\025\040" +
    "\036\041\053\042\037\043\045\050\023\051\055\001\002" +
    "\000\004\024\uff36\001\002\000\006\022\355\027\354\001" +
    "\002\000\004\027\351\001\002\000\050\003\uff43\004\uff43" +
    "\005\uff43\006\uff43\011\uff43\012\uff43\024\uff44\030\uff43\032" +
    "\uff43\033\uff43\034\uff43\035\uff43\037\uff43\040\uff43\041\uff43" +
    "\042\uff43\043\uff43\050\uff43\051\uff43\001\002\000\046\003" +
    "\054\004\043\005\046\006\022\011\033\012\026\030\035" +
    "\032\051\033\044\034\041\035\040\037\025\040\036\041" +
    "\053\042\037\043\045\050\023\051\055\001\002\000\004" +
    "\024\uff42\001\002\000\050\003\uff34\004\uff34\005\uff34\006" +
    "\uff34\011\uff34\012\uff34\024\uff35\030\uff34\032\uff34\033\uff34" +
    "\034\uff34\035\uff34\037\uff34\040\uff34\041\uff34\042\uff34\043" +
    "\uff34\050\uff34\051\uff34\001\002\000\052\003\uff25\004\uff25" +
    "\005\uff25\006\uff25\011\uff25\012\uff25\024\uff26\027\356\030" +
    "\uff25\032\uff25\033\uff25\034\uff25\035\uff25\037\uff25\040\uff25" +
    "\041\uff25\042\uff25\043\uff25\050\uff25\051\uff25\001\002\000" +
    "\050\003\uff7c\004\uff7c\005\uff7c\006\uff7c\011\uff7c\012\uff7c" +
    "\024\uff82\030\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c\037" +
    "\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\050\uff7c\051\uff7c" +
    "\001\002\000\046\003\054\004\043\005\046\006\022\011" +
    "\033\012\026\030\035\032\051\033\044\034\041\035\040" +
    "\037\025\040\036\041\053\042\037\043\045\050\023\051" +
    "\055\001\002\000\004\024\uff24\001\002\000\046\003\054" +
    "\004\043\005\046\006\022\011\033\012\026\030\035\032" +
    "\051\033\044\034\041\035\040\037\025\040\036\041\053" +
    "\042\037\043\045\050\023\051\055\001\002\000\004\024" +
    "\uff7b\001\002\000\046\003\054\004\043\005\046\006\022" +
    "\011\033\012\026\030\035\032\051\033\044\034\041\035" +
    "\040\037\025\040\036\041\053\042\037\043\045\050\023" +
    "\051\055\001\002\000\004\024\uff33\001\002\000\006\022" +
    "\373\027\372\001\002\000\004\027\367\001\002\000\050" +
    "\003\uff40\004\uff40\005\uff40\006\uff40\011\uff40\012\uff40\024" +
    "\uff41\030\uff40\032\uff40\033\uff40\034\uff40\035\uff40\037\uff40" +
    "\040\uff40\041\uff40\042\uff40\043\uff40\050\uff40\051\uff40\001" +
    "\002\000\046\003\054\004\043\005\046\006\022\011\033" +
    "\012\026\030\035\032\051\033\044\034\041\035\040\037" +
    "\025\040\036\041\053\042\037\043\045\050\023\051\055" +
    "\001\002\000\004\024\uff3f\001\002\000\050\003\uff31\004" +
    "\uff31\005\uff31\006\uff31\011\uff31\012\uff31\024\uff32\030\uff31" +
    "\032\uff31\033\uff31\034\uff31\035\uff31\037\uff31\040\uff31\041" +
    "\uff31\042\uff31\043\uff31\050\uff31\051\uff31\001\002\000\052" +
    "\003\uff22\004\uff22\005\uff22\006\uff22\011\uff22\012\uff22\024" +
    "\uff23\027\375\030\uff22\032\uff22\033\uff22\034\uff22\035\uff22" +
    "\037\uff22\040\uff22\041\uff22\042\uff22\043\uff22\050\uff22\051" +
    "\uff22\001\002\000\046\003\054\004\043\005\046\006\022" +
    "\011\033\012\026\030\035\032\051\033\044\034\041\035" +
    "\040\037\025\040\036\041\053\042\037\043\045\050\023" +
    "\051\055\001\002\000\050\003\uff7a\004\uff7a\005\uff7a\006" +
    "\uff7a\011\uff7a\012\uff7a\024\uff81\030\uff7a\032\uff7a\033\uff7a" +
    "\034\uff7a\035\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043" +
    "\uff7a\050\uff7a\051\uff7a\001\002\000\046\003\054\004\043" +
    "\005\046\006\022\011\033\012\026\030\035\032\051\033" +
    "\044\034\041\035\040\037\025\040\036\041\053\042\037" +
    "\043\045\050\023\051\055\001\002\000\004\024\uff79\001" +
    "\002\000\004\024\uff21\001\002\000\046\003\054\004\043" +
    "\005\046\006\022\011\033\012\026\030\035\032\051\033" +
    "\044\034\041\035\040\037\025\040\036\041\053\042\037" +
    "\043\045\050\023\051\055\001\002\000\004\024\uff30\001" +
    "\002\000\004\022\u0104\001\002\000\004\027\u0105\001\002" +
    "\000\050\003\uff76\004\uff76\005\uff76\006\uff76\011\uff76\012" +
    "\uff76\024\uff7f\030\uff76\032\uff76\033\uff76\034\uff76\035\uff76" +
    "\037\uff76\040\uff76\041\uff76\042\uff76\043\uff76\050\uff76\051" +
    "\uff76\001\002\000\046\003\054\004\043\005\046\006\022" +
    "\011\033\012\026\030\035\032\051\033\044\034\041\035" +
    "\040\037\025\040\036\041\053\042\037\043\045\050\023" +
    "\051\055\001\002\000\004\024\uff75\001\002\000\004\027" +
    "\u0130\001\002\000\004\031\u012c\001\002\000\050\003\054" +
    "\004\043\005\046\006\022\011\033\012\026\024\uff5e\030" +
    "\035\032\051\033\044\034\041\035\040\037\025\040\036" +
    "\041\053\042\037\043\045\050\023\051\055\001\002\000" +
    "\004\036\u0125\001\002\000\004\027\u0122\001\002\000\014" +
    "\020\u0111\023\u010f\027\u0110\031\u010e\044\u0112\001\002\000" +
    "\052\003\uff49\004\uff49\005\uff49\006\uff49\011\uff49\012\uff49" +
    "\024\uff4a\027\u011d\030\uff49\032\uff49\033\uff49\034\uff49\035" +
    "\uff49\037\uff49\040\uff49\041\uff49\042\uff49\043\uff49\050\uff49" +
    "\051\uff49\001\002\000\020\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\050\uffab\051\uffab\001\002\000\050\003\uff4c" +
    "\004\uff4c\005\uff4c\006\uff4c\011\uff4c\012\uff4c\024\uff4d\030" +
    "\uff4c\032\uff4c\033\uff4c\034\uff4c\035\uff4c\037\uff4c\040\uff4c" +
    "\041\uff4c\042\uff4c\043\uff4c\050\uff4c\051\uff4c\001\002\000" +
    "\004\027\u0116\001\002\000\004\027\u0113\001\002\000\050" +
    "\003\uffd7\004\uffd7\005\uffd7\006\uffd7\011\uffd7\012\uffd7\024" +
    "\uffd8\030\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\043\uffd7\050\uffd7\051\uffd7\001" +
    "\002\000\046\003\054\004\043\005\046\006\022\011\033" +
    "\012\026\030\035\032\051\033\044\034\041\035\040\037" +
    "\025\040\036\041\053\042\037\043\045\050\023\051\055" +
    "\001\002\000\004\024\uffd6\001\002\000\050\003\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\011\uffd4\012\uffd4\024\uffd5\030\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\050\uffd4\051\uffd4\001\002\000\046" +
    "\003\054\004\043\005\046\006\022\011\033\012\026\030" +
    "\035\032\051\033\044\034\041\035\040\037\025\040\036" +
    "\041\053\042\037\043\045\050\023\051\055\001\002\000" +
    "\004\024\uffd3\001\002\000\046\003\054\004\043\005\046" +
    "\006\022\011\033\012\026\030\035\032\051\033\044\034" +
    "\041\035\040\037\025\040\036\041\053\042\037\043\045" +
    "\050\023\051\055\001\002\000\004\024\uff4b\001\002\000" +
    "\020\037\137\040\131\041\134\042\135\043\132\050\130" +
    "\051\136\001\002\000\004\024\uffaa\001\002\000\050\003" +
    "\uffe0\004\uffe0\005\uffe0\006\uffe0\011\uffe0\012\uffe0\024\uffe1" +
    "\030\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\050\uffe0\051\uffe0\001\002" +
    "\000\046\003\054\004\043\005\046\006\022\011\033\012" +
    "\026\030\035\032\051\033\044\034\041\035\040\037\025" +
    "\040\036\041\053\042\037\043\045\050\023\051\055\001" +
    "\002\000\004\024\uff48\001\002\000\046\003\054\004\043" +
    "\005\046\006\022\011\033\012\026\030\035\032\051\033" +
    "\044\034\041\035\040\037\025\040\036\041\053\042\037" +
    "\043\045\050\023\051\055\001\002\000\004\024\uffdf\001" +
    "\002\000\050\003\uffda\004\uffda\005\uffda\006\uffda\011\uffda" +
    "\012\uffda\024\uffdb\030\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\050\uffda" +
    "\051\uffda\001\002\000\046\003\054\004\043\005\046\006" +
    "\022\011\033\012\026\030\035\032\051\033\044\034\041" +
    "\035\040\037\025\040\036\041\053\042\037\043\045\050" +
    "\023\051\055\001\002\000\004\024\uffd9\001\002\000\004" +
    "\021\u0126\001\002\000\004\022\u0127\001\002\000\004\027" +
    "\u0128\001\002\000\050\003\uff85\004\uff85\005\uff85\006\uff85" +
    "\011\uff85\012\uff85\024\uff86\030\uff85\032\uff85\033\uff85\034" +
    "\uff85\035\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85" +
    "\050\uff85\051\uff85\001\002\000\046\003\054\004\043\005" +
    "\046\006\022\011\033\012\026\030\035\032\051\033\044" +
    "\034\041\035\040\037\025\040\036\041\053\042\037\043" +
    "\045\050\023\051\055\001\002\000\004\024\uff84\001\002" +
    "\000\004\024\uff5d\001\002\000\004\027\u012d\001\002\000" +
    "\050\003\uffdd\004\uffdd\005\uffdd\006\uffdd\011\uffdd\012\uffdd" +
    "\024\uffde\030\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\050\uffdd\051\uffdd" +
    "\001\002\000\046\003\054\004\043\005\046\006\022\011" +
    "\033\012\026\030\035\032\051\033\044\034\041\035\040" +
    "\037\025\040\036\041\053\042\037\043\045\050\023\051" +
    "\055\001\002\000\004\024\uffdc\001\002\000\050\003\uff4f" +
    "\004\uff4f\005\uff4f\006\uff4f\011\uff4f\012\uff4f\024\uff50\030" +
    "\uff4f\032\uff4f\033\uff4f\034\uff4f\035\uff4f\037\uff4f\040\uff4f" +
    "\041\uff4f\042\uff4f\043\uff4f\050\uff4f\051\uff4f\001\002\000" +
    "\046\003\054\004\043\005\046\006\022\011\033\012\026" +
    "\030\035\032\051\033\044\034\041\035\040\037\025\040" +
    "\036\041\053\042\037\043\045\050\023\051\055\001\002" +
    "\000\004\024\uff4e\001\002\000\012\020\uffbe\030\uffbe\031" +
    "\uffbe\047\uffbe\001\002\000\012\020\u0137\030\u0139\031\u0135" +
    "\047\u0138\001\002\000\004\015\u0149\001\002\000\004\022" +
    "\u0141\001\002\000\006\022\uffc9\027\uffc9\001\002\000\004" +
    "\015\u013f\001\002\000\004\015\u013a\001\002\000\012\020" +
    "\u013c\030\u013e\031\u013b\044\u013d\001\002\000\006\022\uffc6" +
    "\027\uffc6\001\002\000\006\022\uffc7\027\uffc7\001\002\000" +
    "\006\022\uffc3\027\uffc3\001\002\000\006\022\uffc5\027\uffc5" +
    "\001\002\000\004\031\u0140\001\002\000\006\022\uffc8\027" +
    "\uffc8\001\002\000\004\023\u0142\001\002\000\046\003\uffbd" +
    "\004\uffbd\005\uffbd\006\uffbd\011\uffbd\012\uffbd\030\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\050\uffbd\051\uffbd\001\002\000\046\003" +
    "\054\004\043\005\046\006\022\011\033\012\026\030\035" +
    "\032\051\033\044\034\041\035\040\037\025\040\036\041" +
    "\053\042\037\043\045\050\023\051\055\001\002\000\004" +
    "\024\u0145\001\002\000\050\003\uffba\004\uffba\005\uffba\006" +
    "\uffba\011\uffba\012\uffba\024\uffbb\030\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\050\uffba\051\uffba\001\002\000\004\024\uffbc\001\002" +
    "\000\046\003\054\004\043\005\046\006\022\011\033\012" +
    "\026\030\035\032\051\033\044\034\041\035\040\037\025" +
    "\040\036\041\053\042\037\043\045\050\023\051\055\001" +
    "\002\000\004\024\uffb9\001\002\000\004\031\u014a\001\002" +
    "\000\006\022\uffc4\027\uffc4\001\002\000\004\002\ufffc\001" +
    "\002\000\006\004\uffb8\030\uffb8\001\002\000\006\004\u014f" +
    "\030\u0150\001\002\000\004\022\u0166\001\002\000\004\030" +
    "\u015e\001\002\000\004\013\u0151\001\002\000\004\031\u0152" +
    "\001\002\000\004\027\u0153\001\002\000\012\020\uffb0\030" +
    "\uffb0\031\uffb0\047\uffb0\001\002\000\012\020\u0137\030\u0139" +
    "\031\u0135\047\u0138\001\002\000\004\027\u0156\001\002\000" +
    "\004\030\u0158\001\002\000\004\022\uffaf\001\002\000\010" +
    "\013\u015b\016\u0159\017\u015a\001\002\000\004\031\u015d\001" +
    "\002\000\004\022\uffac\001\002\000\004\031\u015c\001\002" +
    "\000\004\022\uffad\001\002\000\004\022\uffae\001\002\000" +
    "\004\013\u015f\001\002\000\004\031\u0160\001\002\000\004" +
    "\027\u0161\001\002\000\012\020\uffb2\030\uffb2\031\uffb2\047" +
    "\uffb2\001\002\000\012\020\u0137\030\u0139\031\u0135\047\u0138" +
    "\001\002\000\004\027\u0164\001\002\000\004\030\u0158\001" +
    "\002\000\004\022\uffb1\001\002\000\004\023\u0167\001\002" +
    "\000\046\003\uffb7\004\uffb7\005\uffb7\006\uffb7\011\uffb7\012" +
    "\uffb7\030\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\050\uffb7\051\uffb7\001" +
    "\002\000\046\003\054\004\043\005\046\006\022\011\033" +
    "\012\026\030\035\032\051\033\044\034\041\035\040\037" +
    "\025\040\036\041\053\042\037\043\045\050\023\051\055" +
    "\001\002\000\004\024\u016a\001\002\000\050\003\uffb4\004" +
    "\uffb4\005\uffb4\006\uffb4\011\uffb4\012\uffb4\024\uffb5\030\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\050\uffb4\051\uffb4\001\002\000\004" +
    "\024\uffb6\001\002\000\046\003\054\004\043\005\046\006" +
    "\022\011\033\012\026\030\035\032\051\033\044\034\041" +
    "\035\040\037\025\040\036\041\053\042\037\043\045\050" +
    "\023\051\055\001\002\000\004\024\uffb3\001\002\000\004" +
    "\022\u017e\001\002\000\006\022\u0171\031\u0170\001\002\000" +
    "\006\022\u0176\027\u0175\001\002\000\004\027\u0172\001\002" +
    "\000\050\003\uff10\004\uff10\005\uff10\006\uff10\011\uff10\012" +
    "\uff10\024\uff11\030\uff10\032\uff10\033\uff10\034\uff10\035\uff10" +
    "\037\uff10\040\uff10\041\uff10\042\uff10\043\uff10\050\uff10\051" +
    "\uff10\001\002\000\046\003\054\004\043\005\046\006\022" +
    "\011\033\012\026\030\035\032\051\033\044\034\041\035" +
    "\040\037\025\040\036\041\053\042\037\043\045\050\023" +
    "\051\055\001\002\000\004\024\uff0f\001\002\000\050\003" +
    "\uff07\004\uff07\005\uff07\006\uff07\011\uff07\012\uff07\024\uff08" +
    "\030\uff07\032\uff07\033\uff07\034\uff07\035\uff07\037\uff07\040" +
    "\uff07\041\uff07\042\uff07\043\uff07\050\uff07\051\uff07\001\002" +
    "\000\052\003\ufefe\004\ufefe\005\ufefe\006\ufefe\011\ufefe\012" +
    "\ufefe\024\ufeff\027\u0177\030\ufefe\032\ufefe\033\ufefe\034\ufefe" +
    "\035\ufefe\037\ufefe\040\ufefe\041\ufefe\042\ufefe\043\ufefe\050" +
    "\ufefe\051\ufefe\001\002\000\050\003\uff70\004\uff70\005\uff70" +
    "\006\uff70\011\uff70\012\uff70\024\uff71\030\uff70\032\uff70\033" +
    "\uff70\034\uff70\035\uff70\037\uff70\040\uff70\041\uff70\042\uff70" +
    "\043\uff70\050\uff70\051\uff70\001\002\000\046\003\054\004" +
    "\043\005\046\006\022\011\033\012\026\030\035\032\051" +
    "\033\044\034\041\035\040\037\025\040\036\041\053\042" +
    "\037\043\045\050\023\051\055\001\002\000\004\024\ufefd" +
    "\001\002\000\046\003\054\004\043\005\046\006\022\011" +
    "\033\012\026\030\035\032\051\033\044\034\041\035\040" +
    "\037\025\040\036\041\053\042\037\043\045\050\023\051" +
    "\055\001\002\000\004\024\uff6f\001\002\000\046\003\054" +
    "\004\043\005\046\006\022\011\033\012\026\030\035\032" +
    "\051\033\044\034\041\035\040\037\025\040\036\041\053" +
    "\042\037\043\045\050\023\051\055\001\002\000\004\024" +
    "\uff06\001\002\000\004\027\u017f\001\002\000\050\003\uff19" +
    "\004\uff19\005\uff19\006\uff19\011\uff19\012\uff19\024\uff1a\030" +
    "\uff19\032\uff19\033\uff19\034\uff19\035\uff19\037\uff19\040\uff19" +
    "\041\uff19\042\uff19\043\uff19\050\uff19\051\uff19\001\002\000" +
    "\046\003\054\004\043\005\046\006\022\011\033\012\026" +
    "\030\035\032\051\033\044\034\041\035\040\037\025\040" +
    "\036\041\053\042\037\043\045\050\023\051\055\001\002" +
    "\000\004\024\uff18\001\002\000\004\022\u0192\001\002\000" +
    "\006\022\u0185\031\u0184\001\002\000\006\022\u018a\027\u0189" +
    "\001\002\000\004\027\u0186\001\002\000\050\003\uff0a\004" +
    "\uff0a\005\uff0a\006\uff0a\011\uff0a\012\uff0a\024\uff0b\030\uff0a" +
    "\032\uff0a\033\uff0a\034\uff0a\035\uff0a\037\uff0a\040\uff0a\041" +
    "\uff0a\042\uff0a\043\uff0a\050\uff0a\051\uff0a\001\002\000\046" +
    "\003\054\004\043\005\046\006\022\011\033\012\026\030" +
    "\035\032\051\033\044\034\041\035\040\037\025\040\036" +
    "\041\053\042\037\043\045\050\023\051\055\001\002\000" +
    "\004\024\uff09\001\002\000\050\003\uff01\004\uff01\005\uff01" +
    "\006\uff01\011\uff01\012\uff01\024\uff02\030\uff01\032\uff01\033" +
    "\uff01\034\uff01\035\uff01\037\uff01\040\uff01\041\uff01\042\uff01" +
    "\043\uff01\050\uff01\051\uff01\001\002\000\052\003\ufef8\004" +
    "\ufef8\005\ufef8\006\ufef8\011\ufef8\012\ufef8\024\ufef9\027\u018c" +
    "\030\ufef8\032\ufef8\033\ufef8\034\ufef8\035\ufef8\037\ufef8\040" +
    "\ufef8\041\ufef8\042\ufef8\043\ufef8\050\ufef8\051\ufef8\001\002" +
    "\000\046\003\054\004\043\005\046\006\022\011\033\012" +
    "\026\030\035\032\051\033\044\034\041\035\040\037\025" +
    "\040\036\041\053\042\037\043\045\050\023\051\055\001" +
    "\002\000\050\003\uff6a\004\uff6a\005\uff6a\006\uff6a\011\uff6a" +
    "\012\uff6a\024\uff6b\030\uff6a\032\uff6a\033\uff6a\034\uff6a\035" +
    "\uff6a\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043\uff6a\050\uff6a" +
    "\051\uff6a\001\002\000\046\003\054\004\043\005\046\006" +
    "\022\011\033\012\026\030\035\032\051\033\044\034\041" +
    "\035\040\037\025\040\036\041\053\042\037\043\045\050" +
    "\023\051\055\001\002\000\004\024\uff69\001\002\000\004" +
    "\024\ufef7\001\002\000\046\003\054\004\043\005\046\006" +
    "\022\011\033\012\026\030\035\032\051\033\044\034\041" +
    "\035\040\037\025\040\036\041\053\042\037\043\045\050" +
    "\023\051\055\001\002\000\004\024\uff00\001\002\000\004" +
    "\027\u0193\001\002\000\050\003\uff13\004\uff13\005\uff13\006" +
    "\uff13\011\uff13\012\uff13\024\uff14\030\uff13\032\uff13\033\uff13" +
    "\034\uff13\035\uff13\037\uff13\040\uff13\041\uff13\042\uff13\043" +
    "\uff13\050\uff13\051\uff13\001\002\000\046\003\054\004\043" +
    "\005\046\006\022\011\033\012\026\030\035\032\051\033" +
    "\044\034\041\035\040\037\025\040\036\041\053\042\037" +
    "\043\045\050\023\051\055\001\002\000\004\024\uff12\001" +
    "\002\000\012\020\uffd1\030\uffd1\031\uffd1\047\uffd1\001\002" +
    "\000\012\020\u0137\030\u0139\031\u0135\047\u0138\001\002\000" +
    "\004\022\u0199\001\002\000\004\023\u019a\001\002\000\046" +
    "\003\uffd0\004\uffd0\005\uffd0\006\uffd0\011\uffd0\012\uffd0\030" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\050\uffd0\051\uffd0\001\002\000" +
    "\046\003\054\004\043\005\046\006\022\011\033\012\026" +
    "\030\035\032\051\033\044\034\041\035\040\037\025\040" +
    "\036\041\053\042\037\043\045\050\023\051\055\001\002" +
    "\000\004\024\u019d\001\002\000\052\003\uffcd\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcb\011\uffcd\012\uffcd\024\uffce\030\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\050\uffcd\051\uffcd\001\002\000\004" +
    "\024\uffcf\001\002\000\004\007\u01a2\001\002\000\046\003" +
    "\054\004\043\005\046\006\022\011\033\012\026\030\035" +
    "\032\051\033\044\034\041\035\040\037\025\040\036\041" +
    "\053\042\037\043\045\050\023\051\055\001\002\000\004" +
    "\024\uffcc\001\002\000\004\023\u01a4\001\002\000\004\024" +
    "\uffca\001\002\000\046\003\054\004\043\005\046\006\022" +
    "\011\033\012\026\030\035\032\051\033\044\034\041\035" +
    "\040\037\025\040\036\041\053\042\037\043\045\050\023" +
    "\051\055\001\002\000\004\024\u01a7\001\002\000\004\024" +
    "\uffc2\001\002\000\050\003\uffc0\004\uffc0\005\uffc0\006\uffc0" +
    "\011\uffc0\012\uffc0\024\uffc1\030\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\050\uffc0\051\uffc0\001\002\000\046\003\054\004\043\005" +
    "\046\006\022\011\033\012\026\030\035\032\051\033\044" +
    "\034\041\035\040\037\025\040\036\041\053\042\037\043" +
    "\045\050\023\051\055\001\002\000\004\024\uffbf\001\002" +
    "\000\004\002\uff66\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a8\000\010\002\007\017\003\022\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\020\001\001\000\002\001" +
    "\001\000\032\003\031\004\027\006\051\010\026\011\055" +
    "\012\041\015\033\020\056\021\023\023\046\024\047\025" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\126\062\001\001\000\032\003\063\004\027" +
    "\006\051\010\026\011\055\012\041\015\033\020\056\021" +
    "\023\023\046\024\047\025\030\001\001\000\002\001\001" +
    "\000\004\133\073\001\001\000\004\140\066\001\001\000" +
    "\032\003\072\004\027\006\051\010\026\011\055\012\041" +
    "\015\033\020\056\021\023\023\046\024\047\025\030\001" +
    "\001\000\004\112\070\001\001\000\032\003\071\004\027" +
    "\006\051\010\026\011\055\012\041\015\033\020\056\021" +
    "\023\023\046\024\047\025\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\074\004\027\006\051\010" +
    "\026\011\055\012\041\015\033\020\056\021\023\023\046" +
    "\024\047\025\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\145\104\001" +
    "\001\000\032\003\105\004\027\006\051\010\026\011\055" +
    "\012\041\015\033\020\056\021\023\023\046\024\047\025" +
    "\030\001\001\000\002\001\001\000\004\150\115\001\001" +
    "\000\004\153\110\001\001\000\032\003\114\004\027\006" +
    "\051\010\026\011\055\012\041\015\033\020\056\021\023" +
    "\023\046\024\047\025\030\001\001\000\004\114\112\001" +
    "\001\000\032\003\113\004\027\006\051\010\026\011\055" +
    "\012\041\015\033\020\056\021\023\023\046\024\047\025" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\116\004\027\006\051\010\026\011\055\012\041\015" +
    "\033\020\056\021\023\023\046\024\047\025\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\142\121\001" +
    "\001\000\032\003\122\004\027\006\051\010\026\011\055" +
    "\012\041\015\033\020\056\021\023\023\046\024\047\025" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\126\001\001\000\004\016\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\073\144\074\143\001" +
    "\001\000\004\016\152\001\001\000\004\026\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\103\150\001" +
    "\001\000\032\003\151\004\027\006\051\010\026\011\055" +
    "\012\041\015\033\020\056\021\023\023\046\024\047\025" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\077\157\100\156\001" +
    "\001\000\004\026\161\001\001\000\004\016\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\065\166\070\165\001\001\000\004" +
    "\016\170\001\001\000\004\026\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\075\175\076\176\001\001\000" +
    "\004\026\200\001\001\000\004\016\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\066\205\071\204\001\001\000\004\016\207" +
    "\001\001\000\004\026\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\067\214\072\213\001\001\000\004\016\216\001\001\000" +
    "\004\026\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\101\224\102\223\001\001\000\004\026\226\001\001" +
    "\000\004\016\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\234\001\001\000" +
    "\032\003\235\004\027\006\051\010\026\011\055\012\041" +
    "\015\033\020\056\021\023\023\046\024\047\025\030\001" +
    "\001\000\002\001\001\000\032\003\237\004\027\006\051" +
    "\010\026\011\055\012\041\015\033\020\056\021\023\023" +
    "\046\024\047\025\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\125\243\001\001\000" +
    "\032\003\244\004\027\006\051\010\026\011\055\012\041" +
    "\015\033\020\056\021\023\023\046\024\047\025\030\001" +
    "\001\000\002\001\001\000\004\132\254\001\001\000\004" +
    "\137\247\001\001\000\032\003\253\004\027\006\051\010" +
    "\026\011\055\012\041\015\033\020\056\021\023\023\046" +
    "\024\047\025\030\001\001\000\004\110\251\001\001\000" +
    "\032\003\252\004\027\006\051\010\026\011\055\012\041" +
    "\015\033\020\056\021\023\023\046\024\047\025\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\255" +
    "\004\027\006\051\010\026\011\055\012\041\015\033\020" +
    "\056\021\023\023\046\024\047\025\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\262\004\027\006\051\010\026\011\055" +
    "\012\041\015\033\020\056\021\023\023\046\024\047\025" +
    "\030\001\001\000\002\001\001\000\032\003\264\004\027" +
    "\006\051\010\026\011\055\012\041\015\033\020\056\021" +
    "\023\023\046\024\047\025\030\001\001\000\002\001\001" +
    "\000\032\003\327\004\027\006\051\010\026\011\055\012" +
    "\041\015\033\020\056\021\023\023\046\024\047\025\030" +
    "\001\001\000\004\116\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\273\004\027" +
    "\006\051\010\026\011\055\012\041\015\033\020\056\021" +
    "\023\023\046\024\047\025\030\001\001\000\002\001\001" +
    "\000\032\003\275\004\027\006\051\010\026\011\055\012" +
    "\041\015\033\020\056\021\023\023\046\024\047\025\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\323\001\001\000\002\001\001\000\032\003\320\004\027" +
    "\006\051\010\026\011\055\012\041\015\033\020\056\021" +
    "\023\023\046\024\047\025\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\314\004\027\006\051\010" +
    "\026\011\055\012\041\015\033\020\056\021\023\023\046" +
    "\024\047\025\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\310\004\027\006\051\010\026\011\055" +
    "\012\041\015\033\020\056\021\023\023\046\024\047\025" +
    "\030\001\001\000\002\001\001\000\004\036\312\001\001" +
    "\000\032\003\313\004\027\006\051\010\026\011\055\012" +
    "\041\015\033\020\056\021\023\023\046\024\047\025\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\316\001\001\000\032\003\317\004\027\006\051\010\026" +
    "\011\055\012\041\015\033\020\056\021\023\023\046\024" +
    "\047\025\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\322\004\027\006\051\010\026\011\055\012" +
    "\041\015\033\020\056\021\023\023\046\024\047\025\030" +
    "\001\001\000\002\001\001\000\032\003\324\004\027\006" +
    "\051\010\026\011\055\012\041\015\033\020\056\021\023" +
    "\023\046\024\047\025\030\001\001\000\002\001\001\000" +
    "\032\003\326\004\027\006\051\010\026\011\055\012\041" +
    "\015\033\020\056\021\023\023\046\024\047\025\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\122\333\001\001\000\032\003" +
    "\334\004\027\006\051\010\026\011\055\012\041\015\033" +
    "\020\056\021\023\023\046\024\047\025\030\001\001\000" +
    "\002\001\001\000\004\127\344\001\001\000\004\134\340" +
    "\001\001\000\004\105\342\001\001\000\032\003\341\004" +
    "\027\006\051\010\026\011\055\012\041\015\033\020\056" +
    "\021\023\023\046\024\047\025\030\001\001\000\002\001" +
    "\001\000\032\003\343\004\027\006\051\010\026\011\055" +
    "\012\041\015\033\020\056\021\023\023\046\024\047\025" +
    "\030\001\001\000\002\001\001\000\032\003\345\004\027" +
    "\006\051\010\026\011\055\012\041\015\033\020\056\021" +
    "\023\023\046\024\047\025\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\123\351\001" +
    "\001\000\032\003\352\004\027\006\051\010\026\011\055" +
    "\012\041\015\033\020\056\021\023\023\046\024\047\025" +
    "\030\001\001\000\002\001\001\000\004\130\362\001\001" +
    "\000\004\135\356\001\001\000\004\106\360\001\001\000" +
    "\032\003\357\004\027\006\051\010\026\011\055\012\041" +
    "\015\033\020\056\021\023\023\046\024\047\025\030\001" +
    "\001\000\002\001\001\000\032\003\361\004\027\006\051" +
    "\010\026\011\055\012\041\015\033\020\056\021\023\023" +
    "\046\024\047\025\030\001\001\000\002\001\001\000\032" +
    "\003\363\004\027\006\051\010\026\011\055\012\041\015" +
    "\033\020\056\021\023\023\046\024\047\025\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\124\367\001\001\000\032\003\370\004\027\006\051" +
    "\010\026\011\055\012\041\015\033\020\056\021\023\023" +
    "\046\024\047\025\030\001\001\000\002\001\001\000\004" +
    "\131\u0100\001\001\000\004\136\373\001\001\000\032\003" +
    "\377\004\027\006\051\010\026\011\055\012\041\015\033" +
    "\020\056\021\023\023\046\024\047\025\030\001\001\000" +
    "\004\107\375\001\001\000\032\003\376\004\027\006\051" +
    "\010\026\011\055\012\041\015\033\020\056\021\023\023" +
    "\046\024\047\025\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\u0101\004\027\006\051\010\026\011" +
    "\055\012\041\015\033\020\056\021\023\023\046\024\047" +
    "\025\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\111\u0105\001\001\000\032\003\u0106" +
    "\004\027\006\051\010\026\011\055\012\041\015\033\020" +
    "\056\021\023\023\046\024\047\025\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\u012a\004\027\006\051\010\026\011\055\012\041\015\033" +
    "\020\056\021\023\023\046\024\047\025\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u011d\001\001\000\004\063\u011a\001\001\000\004\120" +
    "\u0118\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\u0113\001\001\000\032\003\u0114\004\027\006\051\010" +
    "\026\011\055\012\041\015\033\020\056\021\023\023\046" +
    "\024\047\025\030\001\001\000\002\001\001\000\004\045" +
    "\u0116\001\001\000\032\003\u0117\004\027\006\051\010\026" +
    "\011\055\012\041\015\033\020\056\021\023\023\046\024" +
    "\047\025\030\001\001\000\002\001\001\000\032\003\u0119" +
    "\004\027\006\051\010\026\011\055\012\041\015\033\020" +
    "\056\021\023\023\046\024\047\025\030\001\001\000\002" +
    "\001\001\000\004\016\u011b\001\001\000\002\001\001\000" +
    "\004\041\u011f\001\001\000\032\003\u011e\004\027\006\051" +
    "\010\026\011\055\012\041\015\033\020\056\021\023\023" +
    "\046\024\047\025\030\001\001\000\002\001\001\000\032" +
    "\003\u0120\004\027\006\051\010\026\011\055\012\041\015" +
    "\033\020\056\021\023\023\046\024\047\025\030\001\001" +
    "\000\002\001\001\000\004\043\u0122\001\001\000\032\003" +
    "\u0123\004\027\006\051\010\026\011\055\012\041\015\033" +
    "\020\056\021\023\023\046\024\047\025\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\104\u0128\001\001\000\032\003\u0129\004" +
    "\027\006\051\010\026\011\055\012\041\015\033\020\056" +
    "\021\023\023\046\024\047\025\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\u012d" +
    "\001\001\000\032\003\u012e\004\027\006\051\010\026\011" +
    "\055\012\041\015\033\020\056\021\023\023\046\024\047" +
    "\025\030\001\001\000\002\001\001\000\004\117\u0130\001" +
    "\001\000\032\003\u0131\004\027\006\051\010\026\011\055" +
    "\012\041\015\033\020\056\021\023\023\046\024\047\025" +
    "\030\001\001\000\002\001\001\000\004\053\u0133\001\001" +
    "\000\004\013\u0135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\u0142\001\001\000" +
    "\032\003\u0143\004\027\006\051\010\026\011\055\012\041" +
    "\015\033\020\056\021\023\023\046\024\047\025\030\001" +
    "\001\000\004\030\u0145\001\001\000\004\055\u0146\001\001" +
    "\000\002\001\001\000\032\003\u0147\004\027\006\051\010" +
    "\026\011\055\012\041\015\033\020\056\021\023\023\046" +
    "\024\047\025\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\u014c" +
    "\001\001\000\004\014\u014d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\u0153\001\001\000\004\013\u0154\001" +
    "\001\000\002\001\001\000\004\005\u0156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\061\u0161\001\001\000\004\013\u0162\001\001\000\002" +
    "\001\001\000\004\005\u0164\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\u0167\001\001\000\032\003\u0168" +
    "\004\027\006\051\010\026\011\055\012\041\015\033\020" +
    "\056\021\023\023\046\024\047\025\030\001\001\000\004" +
    "\032\u016a\001\001\000\004\060\u016b\001\001\000\002\001" +
    "\001\000\032\003\u016c\004\027\006\051\010\026\011\055" +
    "\012\041\015\033\020\056\021\023\023\046\024\047\025" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\144" +
    "\u0172\001\001\000\032\003\u0173\004\027\006\051\010\026" +
    "\011\055\012\041\015\033\020\056\021\023\023\046\024" +
    "\047\025\030\001\001\000\002\001\001\000\004\147\u017b" +
    "\001\001\000\004\152\u0177\001\001\000\004\113\u0179\001" +
    "\001\000\032\003\u0178\004\027\006\051\010\026\011\055" +
    "\012\041\015\033\020\056\021\023\023\046\024\047\025" +
    "\030\001\001\000\002\001\001\000\032\003\u017a\004\027" +
    "\006\051\010\026\011\055\012\041\015\033\020\056\021" +
    "\023\023\046\024\047\025\030\001\001\000\002\001\001" +
    "\000\032\003\u017c\004\027\006\051\010\026\011\055\012" +
    "\041\015\033\020\056\021\023\023\046\024\047\025\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\141" +
    "\u017f\001\001\000\032\003\u0180\004\027\006\051\010\026" +
    "\011\055\012\041\015\033\020\056\021\023\023\046\024" +
    "\047\025\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\146\u0186\001\001\000\032\003\u0187\004\027\006\051" +
    "\010\026\011\055\012\041\015\033\020\056\021\023\023" +
    "\046\024\047\025\030\001\001\000\002\001\001\000\004" +
    "\151\u018f\001\001\000\004\154\u018a\001\001\000\032\003" +
    "\u018e\004\027\006\051\010\026\011\055\012\041\015\033" +
    "\020\056\021\023\023\046\024\047\025\030\001\001\000" +
    "\004\115\u018c\001\001\000\032\003\u018d\004\027\006\051" +
    "\010\026\011\055\012\041\015\033\020\056\021\023\023" +
    "\046\024\047\025\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\u0190\004\027\006\051\010\026\011" +
    "\055\012\041\015\033\020\056\021\023\023\046\024\047" +
    "\025\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\143\u0193\001\001\000\032\003\u0194\004\027\006\051" +
    "\010\026\011\055\012\041\015\033\020\056\021\023\023" +
    "\046\024\047\025\030\001\001\000\002\001\001\000\004" +
    "\046\u0196\001\001\000\004\013\u0197\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\u019a\001\001\000\032" +
    "\003\u019b\004\027\006\051\010\026\011\055\012\041\015" +
    "\033\020\056\021\023\023\046\024\047\025\030\001\001" +
    "\000\004\027\u019d\001\001\000\006\050\u019f\051\u019e\001" +
    "\001\000\002\001\001\000\004\007\u01a2\001\001\000\032" +
    "\003\u01a0\004\027\006\051\010\026\011\055\012\041\015" +
    "\033\020\056\021\023\023\046\024\047\025\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\u01a4\004\027\006\051\010\026\011\055\012\041" +
    "\015\033\020\056\021\023\023\046\024\047\025\030\001" +
    "\001\000\004\031\u01a5\001\001\000\002\001\001\000\004" +
    "\052\u01a7\001\001\000\032\003\u01a8\004\027\006\051\010" +
    "\026\011\055\012\041\015\033\020\056\021\023\023\046" +
    "\024\047\025\030\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


    
    private Symbol s;        

    public void syntax_error(Symbol s){
        Errores e = new Errores("Error sintactico. Linea " + (s.right+1) + "\n\tSintaxis no valida [ " + s.value +" ]");
        Feel.notificar(e);
        report_error("Error de sintaxis",null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Errores e = new Errores("Error sintactico no recuperable. Linea " + (s.right+1) + "\n\tSintaxis no valida [ " + s.value +" ]");
        Feel.notificar(e);
    }

    public void report_error(String message, Object info){ }    
    public void report_fatal_error(String message, Object info){ }

    public Symbol getS(){        
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {

   
    String codObjeto = "";
    Stack pilaInicio = new Stack();       
    Stack pilaSent = new Stack();       
    Stack pilaFin = new Stack();      
    int i = 1, sentAux;
    String incAux;

    boolean statusDec, statusTipo, statusOp;
    String auxObj = "";
    String auxRec = "";

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // ERRORES_ACC ::= Espera Parentesis_a Numero Parentesis_c NT$81 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$81
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // NT$81 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tEspera Parentesis_a Numero Parentesis_c");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$81",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // ERRORES_ACC ::= Espera Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tEspera Parentesis_a Numero Parentesis_c");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // ERRORES_ACC ::= Retroceder Parentesis_a Numero Parentesis_c NT$80 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$80
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // NT$80 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRetroceder Parentesis_a Numero Parentesis_c");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$80",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // ERRORES_ACC ::= Retroceder Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRetroceder Parentesis_a Numero Parentesis_c");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // ERRORES_ACC ::= Avanzar Parentesis_a Numero Parentesis_c NT$79 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$79
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // NT$79 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tAvanzar Parentesis_a Numero Parentesis_c");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$79",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // ERRORES_ACC ::= Avanzar Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tAvanzar Parentesis_a Numero Parentesis_c");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // ERRORES_ACC ::= Espera Parentesis_a Numero P_coma NT$78 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$78
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // NT$78 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tEspera Parentesis_a Numero P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [)]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$78",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // ERRORES_ACC ::= Espera Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tEspera Parentesis_a Numero P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [)]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // ERRORES_ACC ::= Retroceder Parentesis_a Numero P_coma NT$77 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$77
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // NT$77 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRetroceder Parentesis_a Numero P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [)]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$77",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // ERRORES_ACC ::= Retroceder Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRetroceder Parentesis_a Numero P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [)]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // ERRORES_ACC ::= Avanzar Parentesis_a Numero P_coma NT$76 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$76
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // NT$76 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tAvanzar Parentesis_a Numero P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [)]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$76",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // ERRORES_ACC ::= Avanzar Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tAvanzar Parentesis_a Numero P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [)]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // ERRORES_ACC ::= Espera Parentesis_a Parentesis_c P_coma NT$75 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$75
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // NT$75 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tEspera Parentesis_a Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaban parametros.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$75",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // ERRORES_ACC ::= Espera Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tEspera Parentesis_a Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaban parametros.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // ERRORES_ACC ::= Retroceder Parentesis_a Parentesis_c P_coma NT$74 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$74
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // NT$74 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRetroceder Parentesis_a Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaban parametros.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$74",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // ERRORES_ACC ::= Retroceder Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRetroceder Parentesis_a Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaban parametros.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // ERRORES_ACC ::= Avanzar Parentesis_a Parentesis_c P_coma NT$73 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$73
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // NT$73 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tAvanzar Parentesis_a Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaban parametros.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$73",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // ERRORES_ACC ::= Avanzar Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tAvanzar Parentesis_a Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaban parametros.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // ERRORES_ACC ::= Espera Numero Parentesis_c P_coma NT$72 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$72
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // NT$72 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tEspera Numero Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [(]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$72",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // ERRORES_ACC ::= Espera Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tEspera Numero Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [(]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // ERRORES_ACC ::= Retroceder Numero Parentesis_c P_coma NT$71 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$71
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // NT$71 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRetroceder Numero Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [(]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$71",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // ERRORES_ACC ::= Retroceder Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRetroceder Numero Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [(]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // ERRORES_ACC ::= Avanzar Numero Parentesis_c P_coma NT$70 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // NT$70 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tAvanzar Numero Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [(]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$70",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // ERRORES_ACC ::= Avanzar Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tAvanzar Numero Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [(]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // ERRORES_ACC ::= Notificar Parentesis_a Parentesis_c NT$69 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$69
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // NT$69 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tNotificar Parentesis_a Parentesis_c");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$69",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // ERRORES_ACC ::= Notificar Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tNotificar Parentesis_a Parentesis_c");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // ERRORES_ACC ::= RotarL Parentesis_a Parentesis_c NT$68 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // NT$68 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRotarL Parentesis_a Parentesis_c");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$68",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // ERRORES_ACC ::= RotarL Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRotarL Parentesis_a Parentesis_c");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // ERRORES_ACC ::= RotarR Parentesis_a Parentesis_c NT$67 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$67
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // NT$67 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRotarR Parentesis_a Parentesis_c");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$67",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // ERRORES_ACC ::= RotarR Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRotarR Parentesis_a Parentesis_c");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // ERRORES_ACC ::= Apagar Parentesis_a Parentesis_c NT$66 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // NT$66 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tApagar Parentesis_a Parentesis_c");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$66",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // ERRORES_ACC ::= Apagar Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tApagar Parentesis_a Parentesis_c");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // ERRORES_ACC ::= Encender Parentesis_a Parentesis_c NT$65 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // NT$65 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tEncender Parentesis_a Parentesis_c");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$65",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // ERRORES_ACC ::= Encender Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tEncender Parentesis_a Parentesis_c");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // ERRORES_ACC ::= Notificar Parentesis_a P_coma NT$64 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // NT$64 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tNotificar Parentesis_a P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [)]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$64",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // ERRORES_ACC ::= Notificar Parentesis_a P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tNotificar Parentesis_a P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [)]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // ERRORES_ACC ::= RotarL Parentesis_a P_coma NT$63 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // NT$63 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRotarL Parentesis_a P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [)]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$63",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // ERRORES_ACC ::= RotarL Parentesis_a P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRotarL Parentesis_a P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [)]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // ERRORES_ACC ::= RotarR Parentesis_a P_coma NT$62 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$62 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRotarR Parentesis_a P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [)]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$62",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // ERRORES_ACC ::= RotarR Parentesis_a P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRotarR Parentesis_a P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [)]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // ERRORES_ACC ::= Apagar Parentesis_a P_coma NT$61 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // NT$61 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tApagar Parentesis_a P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [)]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$61",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // ERRORES_ACC ::= Apagar Parentesis_a P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tApagar Parentesis_a P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [)]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // ERRORES_ACC ::= Encender Parentesis_a P_coma NT$60 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // NT$60 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tEncender Parentesis_a P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [)]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$60",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ERRORES_ACC ::= Encender Parentesis_a P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tEncender Parentesis_a P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [)]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ERRORES_ACC ::= Notificar Parentesis_c P_coma NT$59 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // NT$59 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tNotificar Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [(]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$59",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // ERRORES_ACC ::= Notificar Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tNotificar Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [(]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // ERRORES_ACC ::= RotarL Parentesis_c P_coma NT$58 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // NT$58 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRotarL Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [(]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$58",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ERRORES_ACC ::= RotarL Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRotarL Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [(]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ERRORES_ACC ::= RotarR Parentesis_c P_coma NT$57 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // NT$57 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRotarR Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [(]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$57",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ERRORES_ACC ::= RotarR Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tRotarR Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [(]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ERRORES_ACC ::= Apagar Parentesis_c P_coma NT$56 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // NT$56 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tApagar Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [(]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$56",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ERRORES_ACC ::= Apagar Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tApagar Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [(]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ERRORES_ACC ::= Encender Parentesis_c P_coma NT$55 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NT$55 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tEncender Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [(]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$55",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ERRORES_ACC ::= Encender Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tEncender Parentesis_c P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (mright+1) + "\n\tSe esperaba un delimitador [(]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_ACC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ERRORES_OP ::= Identificador Igual Numero NT$54 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_OP",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NT$54 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tIdentificador Igual Numero");
        Errores e = new Errores("Error sintactico. Linea " + (idright+1) + "\n\tSe esperaba delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$54",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ERRORES_OP ::= Identificador Igual Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tIdentificador Igual Numero");
        Errores e = new Errores("Error sintactico. Linea " + (idright+1) + "\n\tSe esperaba delimitador [;]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_OP",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ERRORES_OP ::= Identificador Igual P_coma NT$53 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_OP",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$53 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tIdentificador Igual P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (idright+1) + "\n\tSe esperaba un valor.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$53",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ERRORES_OP ::= Identificador Igual P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tIdentificador Igual P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (idright+1) + "\n\tSe esperaba un valor.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_OP",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ERRORES_OP ::= Identificador Numero P_coma NT$52 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_OP",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$52 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tIdentificador Numero P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (idright+1) + "\n\tSe esperaba un operador de asignacion.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$52",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ERRORES_OP ::= Identificador Numero P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tIdentificador Numero P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (idright+1) + "\n\tSe esperaba un operador de asignacion.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_OP",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // ERRORES_DEC ::= T_dato Identificador Op_booleano P_coma SENTENCIA 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tT_dato Identificador Op_booleano P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (idright+1) + "\n\tSe esperaba un operador de asignacion.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ERRORES_DEC ::= T_dato Identificador Op_booleano P_coma 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		    
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tT_dato Identificador Op_booleano P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (idright+1) + "\n\tSe esperaba un operador de asignacion.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ERRORES_DEC ::= T_dato Igual Op_booleano P_coma SENTENCIA 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tT_dato Igual Op_booleano P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (tdright+1) + "\n\tSe esperaba un identificador.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ERRORES_DEC ::= T_dato Igual Op_booleano P_coma 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		          
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tT_dato Igual Op_booleano P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (tdright+1) + "\n\tSe esperaba un identificador.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ERRORES_DEC ::= T_dato Identificador Igual Texto P_coma SENTENCIA 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		           
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tT_dato Identificador Igual P_coma");
        Errores e = new Errores("Error Semántico. Linea " + (idright+1) + "\n\tNo se puede asignar [ "+txt+" ] a un tipo de dato [ "+td+" ]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ERRORES_DEC ::= T_dato Identificador Igual Texto P_coma 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		           
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tT_dato Identificador Igual P_coma");
        Errores e = new Errores("Error Semántico. Linea " + (idright+1) + "\n\tNo se puede asignar [ "+txt+" ] a un tipo de dato [ "+td+" ]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ERRORES_DEC ::= T_dato Identificador Igual P_coma SENTENCIA 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		           
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tT_dato Identificador Igual P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (opright+1) + "\n\tSe esperaba un la asignacion de un valor..");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ERRORES_DEC ::= T_dato Identificador Igual P_coma 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		          
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tT_dato Identificador Igual P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (opright+1) + "\n\tSe esperaba un la asignacion de un valor..");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ERRORES_DEC ::= T_dato Identificador Numero P_coma SENTENCIA 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tT_dato Identificador Numero P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (idright+1) + "\n\tSe esperaba un operador de asignacion.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ERRORES_DEC ::= T_dato Identificador Numero P_coma 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		   
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tT_dato Identificador Numero P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (idright+1) + "\n\tSe esperaba un operador de asignacion.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ERRORES_DEC ::= T_dato Igual Numero P_coma SENTENCIA 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		            
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tT_dato Igual Numero P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (tdright+1) + "\n\tSe esperaba un identificador.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ERRORES_DEC ::= T_dato Igual Numero P_coma 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		        
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tT_dato Igual Numero P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (tdright+1) + "\n\tSe esperaba un identificador.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ERRORES_DEC ::= Identificador P_coma SENTENCIA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tIdentificador P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (idright+1) + "\n\tSe esperaba un tipo de dato.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ERRORES_DEC ::= Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tIdentificador P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (idright+1) + "\n\tSe esperaba un tipo de dato.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ERRORES_DEC ::= T_dato Identificador NT$51 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$51 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
    
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tT_dato Identificador");
        Errores e = new Errores("Error sintactico. Linea " + (idright+1) + "\n\tSe esperaba un delimitador [ ; ]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$51",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ERRORES_DEC ::= T_dato Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tT_dato Identificador");
        Errores e = new Errores("Error sintactico. Linea " + (idright+1) + "\n\tSe esperaba un delimitador [ ; ]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ERRORES_DEC ::= T_dato P_coma SENTENCIA 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		       
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tT_dato P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (tdright+1) + "\n\tSe esperaba un identificador.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ERRORES_DEC ::= T_dato P_coma 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		                    
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tT_dato P_coma");
        Errores e = new Errores("Error sintactico. Linea " + (tdright+1) + "\n\tSe esperaba un identificador.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_DEC",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ERRORES_INIT ::= Clase Identificador Llave_a 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tClase Identificador Llave_a");
        Errores e = new Errores("Error sintactico. Linea " + (idright+1) + "\n\tSe esperaba una llave de cierre [ } ]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_INIT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ERRORES_INIT ::= Clase Identificador Llave_c 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tClase Identificador Llave_c");
        Errores e = new Errores("Error sintactico. Linea " + (idright+1) + "\n\tSe esperaba una llave de apertura [ { ]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_INIT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ERRORES_INIT ::= Clase Llave_a Llave_c 
            {
              Object RESULT =null;
		int clsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object cls = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tClase Llave_a Llave_c");
        Errores e = new Errores("Error sintactico. Linea " + (clsright+1) + "\n\tSe esperaba un identificador.");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_INIT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ERRORES_INIT ::= Identificador Llave_a Llave_c 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Feel.Producciones.add("GRAMATICA INCORRECTA:\n\tIdentificador Llave_a Llave_c");
        Errores e = new Errores("Error sintactico. Linea " + (idright+1) + "\n\tSe esperaba la palabra [ Clase ]");
        Feel.Errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES_INIT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ACCION ::= ERRORES_ACC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ACCION ::= Espera Parentesis_a Numero Parentesis_c P_coma NT$50 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$50 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tEspera Parentesis_a Numero:val Parentesis_c P_coma");
        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo("delay(" + val + ");");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$50",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ACCION ::= Espera Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tEspera Parentesis_a Numero:val Parentesis_c P_coma");
        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo("delay(" + val + ");");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ACCION ::= Retroceder Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tRetroceder Parentesis_a Numero:val Parentesis_c P_coma");
        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo(m + "(" + val + ");");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ACCION ::= Retroceder Parentesis_a Numero Parentesis_c P_coma NT$49 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$49 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tRetroceder Parentesis_a Numero:val Parentesis_c P_coma");
        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo(m + "(" + val + ");");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$49",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ACCION ::= Avanzar Parentesis_a Numero Parentesis_c P_coma NT$48 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$48 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tAvanzar Parentesis_a Numero:val Parentesis_c P_coma");
        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo(m + "(" + val + ");");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$48",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ACCION ::= Avanzar Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tAvanzar Parentesis_a Numero:val Parentesis_c P_coma");
        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo(m + "(" + val + ");");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ACCION ::= Notificar Parentesis_a Parentesis_c P_coma NT$47 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$47 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tNotificar Parentesis_a Parentesis_c P_coma");
        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo(m+"();");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$47",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ACCION ::= Notificar Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tNotificar Parentesis_a Parentesis_c P_coma");
        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo(m+"();");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ACCION ::= Detener Parentesis_a Parentesis_c P_coma NT$46 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$46 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tDetener Parentesis_a Parentesis_c P_coma");
        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo(m+"();");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$46",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ACCION ::= RotarL Parentesis_a Parentesis_c P_coma NT$45 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$45 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tRotarL Parentesis_a Parentesis_c P_coma");
        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo(m+"();");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$45",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ACCION ::= RotarR Parentesis_a Parentesis_c P_coma NT$44 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$44 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tRotarR Parentesis_a Parentesis_c P_coma");
        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo(m+"();");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$44",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ACCION ::= Apagar Parentesis_a Parentesis_c P_coma NT$43 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$43 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo(m+"();");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$43",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ACCION ::= Encender Parentesis_a Parentesis_c P_coma NT$42 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$42 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo(m+"();");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$42",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ACCION ::= Detener Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tDetener Parentesis_a Parentesis_c P_coma");
        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo(m+"();");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ACCION ::= RotarL Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tRotarL Parentesis_a Parentesis_c P_coma");
        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo(m+"();");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ACCION ::= RotarR Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tRotarR Parentesis_a Parentesis_c P_coma");
        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo(m+"();");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ACCION ::= Apagar Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo(m+"();");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ACCION ::= Encender Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        LineasCodigo Dlc = new LineasCodigo(""+m);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo(m+"();");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ACCION ::= Identificador Punto Start Parentesis_a Parentesis_c P_coma NT$41 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$41 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Punto Start Parentesis_a Parentesis_c P_coma");
        Feel.analizarMetodo(id, idright);
        LineasCodigo Dlc = new LineasCodigo("CALL "+id);
        Feel.Lineas.add(Dlc);
        LineasCodigo l = new LineasCodigo(id+"();");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$41",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ACCION ::= Identificador Punto Start Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Punto Start Parentesis_a Parentesis_c P_coma");
        Feel.analizarMetodo(id, idright);
        LineasCodigo Dlc = new LineasCodigo("CALL "+id);
        Feel.Lineas.add(Dlc);        
        LineasCodigo l = new LineasCodigo(id+"();");
        Feel.CodigoObjeto.add(l);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FUNCION ::= Func Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c SENTENCIA 
            {
              Object RESULT =null;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tFunc Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FUNCION ::= Func Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tFunc Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ENDMETODO ::= Llave_c P_coma 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Feel.endAsign(); 
        LineasCodigo Dlc = new LineasCodigo("RETURN");
        Feel.LineasMac.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("}");
        Feel.CodObjRec.add(codObj);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENDMETODO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ENDMETODO ::= Llave_c P_coma NT$40 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENDMETODO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$40 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Feel.endAsign(); 
        LineasCodigo Dlc = new LineasCodigo("RETURN");
        Feel.LineasMac.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("}");
        Feel.CodObjRec.add(codObj);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$40",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // METODO ::= Espera Parentesis_a Numero Parentesis_c P_coma NT$39 ENDMETODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$39 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tEspera Parentesis_a Numero Parentesis_c P_coma");
        Feel.addMetodoRec(m);
        LineasCodigo Dlc = new LineasCodigo("  "+m);
        Feel.LineasMac.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("\tdelay("+val+");");
        Feel.CodObjRec.add(codObj);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$39",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // METODO ::= Espera Parentesis_a Numero Parentesis_c P_coma NT$38 METODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$38 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tEspera Parentesis_a Numero Parentesis_c P_coma");
        Feel.addMetodoRec(m);
        LineasCodigo Dlc = new LineasCodigo("  "+m);
        Feel.LineasMac.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("\tdelay("+val+");");
        Feel.CodObjRec.add(codObj);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$38",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // METODO ::= Notificar Parentesis_a Parentesis_c P_coma NT$37 ENDMETODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$37 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tNotificar Parentesis_a Parentesis_c P_coma");
        Feel.addMetodoRec(m);
        LineasCodigo Dlc = new LineasCodigo("  "+m);
        Feel.LineasMac.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("\t"+m.toString()+"();");
        Feel.CodObjRec.add(codObj);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$37",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // METODO ::= Notificar Parentesis_a Parentesis_c P_coma NT$36 METODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$36 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tNotificar Parentesis_a Parentesis_c P_coma");
        Feel.addMetodoRec(m);
        LineasCodigo Dlc = new LineasCodigo("  "+m);
        Feel.LineasMac.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("\t"+m.toString()+"();");
        Feel.CodObjRec.add(codObj);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$36",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // METODO ::= Retroceder Parentesis_a Numero Parentesis_c P_coma NT$35 METODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$35 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tRetroceder Parentesis_a Numero Parentesis_c P_coma");
        Feel.addMetodoRec(m);
        LineasCodigo Dlc = new LineasCodigo("  "+m);
        Feel.LineasMac.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("\t"+m.toString()+"("+val+");");
        Feel.CodObjRec.add(codObj);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$35",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // METODO ::= Retroceder Parentesis_a Numero Parentesis_c P_coma NT$34 ENDMETODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$34 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tRetroceder Parentesis_a Numero Parentesis_c P_coma");
        Feel.addMetodoRec(m);
        LineasCodigo Dlc = new LineasCodigo("  "+m);
        Feel.LineasMac.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("\t"+m.toString()+"("+val+");");
        Feel.CodObjRec.add(codObj);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$34",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // METODO ::= Avanzar Parentesis_a Numero Parentesis_c P_coma NT$33 METODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$33 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tAvanzar Parentesis_a Numero Parentesis_c P_coma");
        Feel.addMetodoRec(m);
        LineasCodigo Dlc = new LineasCodigo("  "+m);
        Feel.LineasMac.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("\t"+m.toString()+"("+val+");");
        Feel.CodObjRec.add(codObj);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$33",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // METODO ::= Avanzar Parentesis_a Numero Parentesis_c P_coma NT$32 ENDMETODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$32 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tAvanzar Parentesis_a Numero Parentesis_c P_coma");
        Feel.addMetodoRec(m);
        LineasCodigo Dlc = new LineasCodigo("  "+m);
        Feel.LineasMac.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("\t"+m.toString()+"("+val+");");
        Feel.CodObjRec.add(codObj);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$32",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // METODO ::= Detener Parentesis_a Parentesis_c P_coma NT$31 METODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$31 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tDetener Parentesis_a Parentesis_c P_coma");
        Feel.addMetodoRec(m);
        LineasCodigo Dlc = new LineasCodigo("  "+m);
        Feel.LineasMac.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("\t"+m.toString()+"();");
        Feel.CodObjRec.add(codObj);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$31",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // METODO ::= RotarL Parentesis_a Parentesis_c P_coma NT$30 METODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$30 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tRotarL Parentesis_a Parentesis_c P_coma");
        Feel.addMetodoRec(m);
        LineasCodigo Dlc = new LineasCodigo("  "+m);
        Feel.LineasMac.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("\t"+m.toString()+"();");
        Feel.CodObjRec.add(codObj);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$30",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // METODO ::= RotarR Parentesis_a Parentesis_c P_coma NT$29 METODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$29 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tRotarR Parentesis_a Parentesis_c P_coma");
        Feel.addMetodoRec(m);
        LineasCodigo Dlc = new LineasCodigo("  "+m);
        Feel.LineasMac.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("\t"+m.toString()+"();");
        Feel.CodObjRec.add(codObj);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$29",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // METODO ::= Detener Parentesis_a Parentesis_c P_coma NT$28 ENDMETODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$28 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tDetener Parentesis_a Parentesis_c P_coma");
        Feel.addMetodoRec(m);
        LineasCodigo Dlc = new LineasCodigo("  "+m);
        Feel.LineasMac.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("\t"+m.toString()+"();");
        Feel.CodObjRec.add(codObj);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$28",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // METODO ::= RotarL Parentesis_a Parentesis_c P_coma NT$27 ENDMETODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$27 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tRotarL Parentesis_a Parentesis_c P_coma");
        Feel.addMetodoRec(m);
        LineasCodigo Dlc = new LineasCodigo("  "+m);
        Feel.LineasMac.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("\t"+m.toString()+"();");
        Feel.CodObjRec.add(codObj);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$27",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // METODO ::= RotarR Parentesis_a Parentesis_c P_coma NT$26 ENDMETODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$26 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tRotarR Parentesis_a Parentesis_c P_coma");
        Feel.addMetodoRec(m);
        LineasCodigo Dlc = new LineasCodigo("  "+m);
        Feel.LineasMac.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("\t"+m.toString()+"();");
        Feel.CodObjRec.add(codObj);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$26",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RECORRIDO ::= Recorrido Identificador Igual Llave_a NT$25 METODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RECORRIDO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$25 ::= 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tRecorrido Identificador Igual Llave_a METODO");
        Feel.crearObjeto(id,td,1,idright,idleft); 
        LineasCodigo Dlc = new LineasCodigo(""+id+":");
        Feel.LineasMac.add(Dlc);
        auxRec = "void " + id.toString() + "(){";
        LineasCodigo codObj = new LineasCodigo(auxRec);
        Feel.CodObjRec.add(codObj);
        auxRec = "";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$25",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // RECORRIDO ::= Identificador Igual Llave_a NT$24 METODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RECORRIDO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$24 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
  
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Igual Llave_a METODO");
        LineasCodigo Dlc = new LineasCodigo(""+id+":");
        Feel.LineasMac.add(Dlc);
        auxRec = "void " + id.toString() + "(){";
        LineasCodigo codObj = new LineasCodigo(auxRec);
        Feel.CodObjRec.add(codObj);
        auxRec = "";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$24",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION_CICLO ::= Identificador Op_incremento 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Op_incremento");
        Feel.agregarValor(id,op,null,idright+1);        
        incAux = ""+id + op;
        auxObj += ";"+id.toString() + op.toString();        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CICLO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION_CICLO ::= Identificador Igual Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Igual Numero");
        Feel.añadirValor(id,val,idright+1);        
        incAux = ""+id + op + val;
        auxObj += ";"+id.toString() + op.toString() + val.toString();
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CICLO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION_CICLO ::= Identificador Op_asignacion Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Op_asignacion Numero");
        Feel.agregarValor(id,op,val,idright+1);
        incAux = ""+id + op + val;
        auxObj += ";"+id.toString() + op.toString() + val.toString();
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CICLO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_CICLO ::= Identificador Igual Numero P_coma NT$23 SENTENCIA_BOOLEANA P_coma DECLARACION_CICLO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CICLO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$23 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_CICLO");
        Feel.añadirValor(id,val,idright+1);        
        pilaInicio.push(i);
        pilaSent.push(i+1);
        pilaFin.push(i+2);
        i = (int)pilaFin.lastElement()+1;
        sentAux = (int)pilaInicio.lastElement();
        String codInt = ""+id + op + val + "\nL"+(int)pilaSent.lastElement();
        LineasCodigo Dlc = new LineasCodigo(codInt);
        Feel.Lineas.add(Dlc);
        auxObj += id.toString() + op.toString() + val.toString()+";";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$23",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_CICLO ::= T_dato Identificador Igual Numero P_coma NT$22 SENTENCIA_BOOLEANA P_coma DECLARACION_CICLO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CICLO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$22 ::= 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tT_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_CICLO");
        Feel.crearObjeto(id,td,val,idright,idleft);
        Feel.verificarTipo(td,val,idright);        
        pilaInicio.push(i);
        pilaSent.push(i+1);
        pilaFin.push(i+2);
        i = (int)pilaFin.lastElement()+1;
        sentAux = (int)pilaInicio.lastElement();
        String codInt = ""+id + op + val + "\ngoto L"+sentAux+"\nL"+(int)pilaSent.lastElement()+":";
        LineasCodigo Dlc = new LineasCodigo(codInt);
        Feel.Lineas.add(Dlc);
        if(td.toString().equals("entero")){
            auxObj += "int " + id.toString() + op.toString() + val.toString()+";";
        }else if(td.toString().equals("booleano")){
            auxObj += "boolean " + id.toString() + op.toString() + val.toString()+";";
        }        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$22",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FIN_CICLO ::= Llave_c NT$21 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_CICLO",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$21 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        String codInt = incAux + "\ngoto L"+sentAux+"\nL"+pilaFin.pop()+":";
        LineasCodigo Dlc = new LineasCodigo(codInt);
        Feel.Lineas.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("}");
        Feel.CodigoObjeto.add(codObj);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$21",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FIN_CICLO ::= Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String codInt = incAux + "\ngoto L"+sentAux+"\nL"+pilaFin.pop()+":";
        LineasCodigo Dlc = new LineasCodigo(codInt);
        Feel.Lineas.add(Dlc);
        LineasCodigo codObj = new LineasCodigo("}");
        Feel.CodigoObjeto.add(codObj);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_CICLO",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CICLO ::= Ciclo Parentesis_a NT$19 SENTENCIA_CICLO Parentesis_c Llave_a NT$20 SENTENCIA FIN_CICLO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

        auxObj += "){";
        LineasCodigo codObj = new LineasCodigo(auxObj);
        Feel.CodigoObjeto.add(codObj);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$20",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$19 ::= 
            {
              Object RESULT =null;
    
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tCiclo Parentesis_a SENTENCIA_CICLO Parentesis_c Llave_a SENTENCIA Llave_c");
        auxObj = "for(";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$19",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FIN_MIENTRAS ::= Llave_c NT$18 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_MIENTRAS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$18 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        String codInt = "goto L" + sentAux + "\nL" + pilaFin.pop() + ":";
        LineasCodigo Dlc = new LineasCodigo(codInt);
        Feel.Lineas.add(Dlc);               
        LineasCodigo codObj = new LineasCodigo("}");
        Feel.CodigoObjeto.add(codObj);
        auxObj="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$18",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FIN_MIENTRAS ::= Llave_c 
            {
              Object RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String codInt = "goto L" + sentAux + "\nL" + pilaFin.pop() + ":";
        LineasCodigo Dlc = new LineasCodigo(codInt);
        Feel.Lineas.add(Dlc);               
        LineasCodigo codObj = new LineasCodigo("}");
        Feel.CodigoObjeto.add(codObj);
        auxObj="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_MIENTRAS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MIENTRAS ::= Mientras Parentesis_a NT$16 SENTENCIA_BOOLEANA Parentesis_c Llave_a NT$17 SENTENCIA FIN_MIENTRAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

        auxObj += "){";
        LineasCodigo codObj = new LineasCodigo(auxObj);
        Feel.CodigoObjeto.add(codObj);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$17",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$16 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tMientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c");
        pilaInicio.push(i);
        pilaSent.push(i+1);
        pilaFin.push(i+2);
        i = (int)pilaFin.lastElement()+1;
        sentAux = (int)pilaInicio.lastElement();
        String codInt = "goto L" + pilaInicio.lastElement() + "\nL" + pilaSent.lastElement() + ":";
        LineasCodigo Dlc = new LineasCodigo(codInt);
        Feel.Lineas.add(Dlc);
        auxObj = "while(";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$16",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FIN_SINO ::= Llave_c NT$15 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_SINO",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$15 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        String codInt = "goto L" + i + "\nL" + i + ":";
        LineasCodigo Dlc = new LineasCodigo(codInt);
        Feel.Lineas.add(Dlc); 
        i++;
        LineasCodigo codObj = new LineasCodigo("}");
        Feel.CodigoObjeto.add(codObj);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$15",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FIN_SINO ::= Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String codInt = "goto L" + i + "\nL" + i + ":";
        LineasCodigo Dlc = new LineasCodigo(codInt);
        Feel.Lineas.add(Dlc); 
        i++;
        LineasCodigo codObj = new LineasCodigo("}");
        Feel.CodigoObjeto.add(codObj);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_SINO",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SI_NO ::= Si_No Llave_a SENTENCIA FIN_SINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI_NO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Texto 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Op_relacional Texto");
        Feel.verifCondicion(id,op,val,idright);
        String codInt = "L"+pilaInicio.pop()+":\n";
        codInt += "if " + id + op + val + " goto L" + pilaSent.pop();
        codInt += " else goto L" + pilaFin.lastElement();        
        LineasCodigo Dlc = new LineasCodigo(codInt);                                
        Feel.LineasCond.add (Dlc);
        if(op.toString().equals("==")){
            auxObj += id.toString() + ".equals(" + val.toString()+")";
        }else{
            auxObj += "!"+id.toString() + ".equals(" + val.toString()+")";
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_BOOLEANA ::= Numero Op_relacional Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tNumero Op_relacional Numero");
        Feel.verifCondicion(id,op,val,idright);
        String codInt = "L"+pilaInicio.pop()+":\n";
        codInt += "if " + id + op + val + " goto L" + pilaSent.pop();
        codInt += " else goto L" + pilaFin.lastElement();        
        LineasCodigo Dlc = new LineasCodigo(codInt);                                
        Feel.LineasCond.add (Dlc);
        auxObj += id.toString() + op.toString() + val.toString();
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Op_relacional Identificador");
        Feel.verifCondicion(id,op,val,idright);
        String codInt = "L"+pilaInicio.pop()+":\n";
        codInt += "if " + id + op + val + " goto L" + pilaSent.pop();
        codInt += " else goto L" + pilaFin.lastElement();        
        LineasCodigo Dlc = new LineasCodigo(codInt);                                
        Feel.LineasCond.add (Dlc);
        auxObj += id.toString() + op.toString() + val.toString();
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Op_relacional Numero");
        Feel.verifCondicion(id,op,val,idright);
        String codInt = "L"+pilaInicio.pop()+":\n";
        codInt += "if " + id + op + val + " goto L" + pilaSent.pop();
        codInt += " else goto L" + pilaFin.lastElement();        
        LineasCodigo Dlc = new LineasCodigo(codInt);                                
        Feel.LineasCond.add (Dlc);
        auxObj += id.toString() + op.toString() + val.toString();
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		   
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Op_relacional Op_booleano");
        Feel.verifCondicion(id,op,val,idright);
        String codInt = "L"+pilaInicio.pop()+":\n";
        codInt += "if " + id + op + val + " goto L" + pilaSent.pop();
        codInt += " else goto L" + pilaFin.lastElement();        
        LineasCodigo Dlc = new LineasCodigo(codInt);                                
        Feel.LineasCond.add (Dlc);
        if(val.toString().equals("verdadero")){
            auxObj += id.toString() + op.toString() + "true";
        }else{
            auxObj += id.toString() + op.toString() + "false";
        }        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_BOOLEANA ::= Sensor Op_relacional Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		        
        String codInt = "L"+pilaInicio.pop()+":\n";
        codInt += "if " + id + op + val + " goto L" + pilaSent.pop();
        codInt += " else goto L" + pilaFin.lastElement();        
        LineasCodigo Dlc = new LineasCodigo(codInt);                                
        Feel.LineasCond.add (Dlc);
        auxObj += "Serial.input" + op.toString() + val.toString();
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tOp_booleano");
        if(val.toString().equals("verdadero")){
            auxObj += "true";
        }else{
            auxObj += "false";
        } 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FIN_SI ::= Llave_c NT$14 SI_NO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_SI",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$14 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tSi_No Llave_a SENTENCIA Llave_c");
        String codInt = "goto L" + i + "\nL" + pilaFin.pop() + ":";
        LineasCodigo Dlc = new LineasCodigo(codInt);
        Feel.Lineas.add(Dlc);               
        LineasCodigo codObj = new LineasCodigo("}else{");
        Feel.CodigoObjeto.add(codObj);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$14",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FIN_SI ::= Llave_c NT$13 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_SI",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$13 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        String codInt = "goto L" + pilaFin.lastElement() + "\nL" + pilaFin.pop() + ":";
        LineasCodigo Dlc = new LineasCodigo(codInt);
        Feel.Lineas.add(Dlc);               
        LineasCodigo codObj = new LineasCodigo("}");
        Feel.CodigoObjeto.add(codObj);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$13",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FIN_SI ::= Llave_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String codInt = "goto L" + pilaFin.lastElement() + "\nL" + pilaFin.pop() + ":";
        LineasCodigo Dlc = new LineasCodigo(codInt);
        Feel.Lineas.add(Dlc);                
        LineasCodigo codObj = new LineasCodigo("}");
        Feel.CodigoObjeto.add(codObj);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN_SI",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SI ::= Si Parentesis_a NT$11 SENTENCIA_BOOLEANA Parentesis_c Llave_a NT$12 SENTENCIA FIN_SI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object sb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object sb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        auxObj += "){";        
        LineasCodigo codObj = new LineasCodigo(auxObj);
        Feel.CodigoObjeto.add(codObj);
        auxObj = "";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$11 ::= 
            {
              Object RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
    
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tSi Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c");
        pilaInicio.push(i);
        pilaSent.push(i+1);
        pilaFin.push(i+2);
        i = (int)pilaFin.lastElement()+1;
        String codInt = "goto L" + pilaInicio.lastElement() + "\nL" + pilaSent.lastElement() + ":";
        LineasCodigo Dlc = new LineasCodigo(codInt);
        Feel.Lineas.add(Dlc);              
        auxObj = "if(";        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION ::= ERRORES_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION ::= Identificador Igual Op_booleano P_coma NT$10 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$10 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Igual Op_booleano P_coma");
        statusOp = Feel.añadirValor(id,val,idright+1);
        if(statusOp == true){
            LineasCodigo Dlc;
            Dlc = new LineasCodigo(id + " = " + val);
            Feel.Lineas.add(Dlc);
            LineasCodigo codObj = new LineasCodigo(id + " " + op + " " + val + ";");
            Feel.CodigoObjeto.add(codObj);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION ::= Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Igual Op_booleano P_coma");
        statusOp = Feel.añadirValor(id,val,idright+1);        
        if(statusOp == true){
            LineasCodigo Dlc;
            Dlc = new LineasCodigo(id + " = " + val);
            Feel.Lineas.add(Dlc);
            LineasCodigo codObj = new LineasCodigo(id + " " + op + " " + val + ";");
            Feel.CodigoObjeto.add(codObj);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION ::= Identificador Igual Texto P_coma NT$9 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$9 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Igual Texto P_coma");
        statusOp = Feel.añadirValor(id,val,idright+1);            
        if(statusOp == true){
            LineasCodigo Dlc;
            Dlc = new LineasCodigo(id + " = " + val);
            Feel.Lineas.add(Dlc);
            LineasCodigo codObj = new LineasCodigo(id + " " + op + " " + val + ";");
            Feel.CodigoObjeto.add(codObj);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION ::= Identificador Igual Texto P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Igual Texto P_coma");
        statusOp = Feel.añadirValor(id,val,idright+1); 
        if(statusOp == true){
            LineasCodigo Dlc;
            Dlc = new LineasCodigo(id + " = " + val);
            Feel.Lineas.add(Dlc);
            LineasCodigo codObj = new LineasCodigo(id + " " + op + " " + val + ";");
            Feel.CodigoObjeto.add(codObj);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION ::= Identificador Op_incremento P_coma NT$8 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$8 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
     
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Op_incremento P_coma");
        statusOp = Feel.agregarValor(id,op,null,idright+1);
        if(statusOp == true){
            LineasCodigo Dlc;
            Dlc = new LineasCodigo(id +""+ op);           
            Feel.Lineas.add(Dlc);
            LineasCodigo codObj = new LineasCodigo(id +""+ op + ";");
            Feel.CodigoObjeto.add(codObj);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION ::= Identificador Op_incremento P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Op_incremento P_coma");
        statusOp = Feel.agregarValor(id,op,null,idright+1);
        if(statusOp == true){
            LineasCodigo Dlc;        
            Dlc = new LineasCodigo(id +""+ op);           
            Feel.Lineas.add(Dlc);
            LineasCodigo codObj = new LineasCodigo(id +""+ op + ";");
            Feel.CodigoObjeto.add(codObj);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION ::= Identificador Op_asignacion Numero P_coma NT$7 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$7 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Op_asignacion Numero P_coma");
        statusOp = Feel.agregarValor(id,op,val,idright+1);
        if(statusOp == true){
            LineasCodigo Dlc = new LineasCodigo(id + " " + op + " " + val);
            Feel.Lineas.add(Dlc);
            LineasCodigo codObj = new LineasCodigo(id + " " + op + " " + val + ";");
            Feel.CodigoObjeto.add(codObj);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION ::= Identificador Op_asignacion Numero P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Op_asignacion Numero P_coma");
        statusOp = Feel.agregarValor(id,op,val,idright+1);
        if(statusOp == true){
            LineasCodigo Dlc = new LineasCodigo(id + " " + op + " " + val);
            Feel.Lineas.add(Dlc);
            LineasCodigo codObj = new LineasCodigo(id + " " + op + " " + val + ";");
            Feel.CodigoObjeto.add(codObj);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION ::= Identificador Igual Numero P_coma NT$6 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$6 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Igual Numero P_coma");
        statusOp = Feel.añadirValor(id,val,idright+1);
        if(statusOp == true){
            LineasCodigo Dlc = new LineasCodigo(id + " = " + val);
            Feel.Lineas.add(Dlc);
            LineasCodigo codObj = new LineasCodigo(id + " " + op + " " + val + ";");
            Feel.CodigoObjeto.add(codObj);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tIdentificador Igual Numero P_coma");
        statusOp = Feel.añadirValor(id,val,idright+1);
        if(statusOp == true){
            LineasCodigo Dlc = new LineasCodigo(id + " = " + val);
            Feel.Lineas.add(Dlc);
            LineasCodigo codObj = new LineasCodigo(id + " " + op + " " + val + ";");
            Feel.CodigoObjeto.add(codObj);
        }            
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= ERRORES_DEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Cadena Identificador Igual Texto P_coma NT$5 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tCadena Identificador Igual Texto P_coma");
        statusDec = Feel.crearObjeto(id,td,val,idright,idleft);
        statusTipo = Feel.verificarTipo(td,val,idright);
        if(statusDec == true && statusTipo == true){
            LineasCodigo Dlc = new LineasCodigo(id + " = " + val);
            Feel.Lineas.add(Dlc);
            LineasCodigo l = new LineasCodigo("String "+id+" = " + val + ";");
            Feel.CodigoObjeto.add(l);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Cadena Identificador P_coma NT$4 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$4 ::= 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tCadena Identificador P_coma");
        statusDec = Feel.crearObjeto(id,td,null,idright,idleft);        
        if(statusDec == true){
            LineasCodigo l = new LineasCodigo("String "+id+";");
            Feel.CodigoObjeto.add(l);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= T_dato Identificador Igual Op_booleano P_coma NT$3 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tT_dato Identificador Igual Op_booleano P_coma");
        statusDec = Feel.crearObjeto(id,td,val,idright,idleft);
        statusTipo = Feel.verificarTipo(td,val,idright);
        if(statusDec == true && statusTipo == true){
            LineasCodigo Dlc = new LineasCodigo(id + " = " + val);
            Feel.Lineas.add(Dlc);        
            LineasCodigo l;
            if(val.toString().equals("verdadero")){
                l = new LineasCodigo("boolean " + id + " = true;");
            }else{
                l = new LineasCodigo("boolean " + id + " = false;");
            }             
            Feel.CodigoObjeto.add(l);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= T_dato Identificador Igual Numero P_coma NT$2 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$2 ::= 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
  
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tT_dato Identificador Igual Numero P_coma");
        statusDec = Feel.crearObjeto(id,td,val,idright,idleft); 
        statusTipo = Feel.verificarTipo(td,val,idright);
        if(statusDec == true && statusTipo == true){
            LineasCodigo Dlc = new LineasCodigo(id + " = " + val);
            Feel.Lineas.add(Dlc);
            if(td.equals("entero")){
                LineasCodigo l = new LineasCodigo("int "+id+" = " + val + ";");
                Feel.CodigoObjeto.add(l);
            }else{
                LineasCodigo l = new LineasCodigo("boolean "+id+" = " + val + ";");
                Feel.CodigoObjeto.add(l);
            }        
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= T_dato Identificador P_coma NT$1 SENTENCIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
   
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tT_dato Identificador P_coma");
        statusDec = Feel.crearObjeto(id,td,null,idright,idleft);             
        if(statusDec == true){
            if(td.equals("entero")){
                LineasCodigo l = new LineasCodigo("int "+id+";");
                Feel.CodigoObjeto.add(l);
            }else{
                LineasCodigo l = new LineasCodigo("boolean "+id+";");
                Feel.CodigoObjeto.add(l);
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Cadena Identificador Igual Texto P_coma 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tCadena Identificador Igual Texto P_coma");
        statusDec = Feel.crearObjeto(id,td,val,idright,idleft);
        statusTipo = Feel.verificarTipo(td,val,idright);
        if(statusDec == true && statusTipo == true){
            LineasCodigo Dlc = new LineasCodigo(id + " = " + val);
            Feel.Lineas.add(Dlc);
            LineasCodigo l = new LineasCodigo("String "+id+" = " + val + ";");
            Feel.CodigoObjeto.add(l);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Cadena Identificador P_coma 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tCadena Identificador P_coma");
        statusDec = Feel.crearObjeto(id,td,null,idright,idleft);        
        if(statusDec == true){
            LineasCodigo l = new LineasCodigo("String "+id+";");
            Feel.CodigoObjeto.add(l);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= T_dato Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tT_dato Identificador Igual Op_booleano P_coma");
        statusDec = Feel.crearObjeto(id,td,val,idright,idleft);
        statusTipo = Feel.verificarTipo(td,val,idright);      
        if(statusDec == true && statusTipo == true){            
            LineasCodigo Dlc = new LineasCodigo(id + " = " + val);
            Feel.Lineas.add(Dlc);
            LineasCodigo l;
            if(val.toString().equals("verdadero")){
                l = new LineasCodigo("boolean " + id + " = true;");
            }else{
                l = new LineasCodigo("boolean " + id + " = false;");
            }             
            Feel.CodigoObjeto.add(l);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		       
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tT_dato Identificador Igual Numero P_coma");
        statusDec = Feel.crearObjeto(id,td,val,idright,idleft);
        statusTipo = Feel.verificarTipo(td,val,idright);
        if(statusDec == true && statusTipo == true){
            LineasCodigo Dlc = new LineasCodigo(id + " = " + val);
            Feel.Lineas.add(Dlc);
            if(td.equals("entero")){
                LineasCodigo l = new LineasCodigo("int "+id+" = " + val + ";");
                Feel.CodigoObjeto.add(l);
            }else{
                LineasCodigo l = new LineasCodigo("boolean "+id+" = " + val + ";");
                Feel.CodigoObjeto.add(l);
            }    
        }            
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		                    
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tT_dato Identificador P_coma");
        statusDec = Feel.crearObjeto(id,td,null,idright,idleft);         
        if(statusDec == true){
            if(td.equals("entero")){
                LineasCodigo l = new LineasCodigo("int "+id+";");
                Feel.CodigoObjeto.add(l);
            }else{
                LineasCodigo l = new LineasCodigo("boolean "+id+";");
                Feel.CodigoObjeto.add(l);
            }        
        }        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= ACCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= RECORRIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= CICLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA_CLASE ::= Clase Identificador Llave_a NT$0 SENTENCIA Llave_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tClase Identificador Llave_a Llave_c");
        Feel.crearObjeto(id,td,null,idright,idleft);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA_CLASE ::= Clase Identificador Llave_a Llave_c 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		      
        Feel.Producciones.add("GRAMATICA CORRECTA:\n\tClase Identificador Llave_a Llave_c");
        Objetos o = new Objetos(id,td,idright,idleft);        
        Feel.Objetos.add(o);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= ERRORES_INIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA_CLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

